/*
 * PROJECT:   Veil
 * FILE:      Veil.System.SMBios.h
 * PURPOSE:   This file is part of Veil.
 *
 * LICENSE:   MIT License
 *
 * DEVELOPER: MeeSong (meesong@outlook.com)
 */

 /*
  * Definitions that describe SMBIOS - https://www.dmtf.org/standards/smbios
  *
  * This file is part of System Informer.
  */

#pragma once
#ifndef _SMBIOS_H
#define _SMBIOS_H

 // Warnings which disabled for compiling
#if _MSC_VER >= 1200
#pragma warning(push)
// nonstandard extension used : nameless struct/union
#pragma warning(disable:4201)
// nonstandard extension used : bit field types other than int
#pragma warning(disable:4214)
// 'struct_name' : structure was padded due to __declspec(align())
#pragma warning(disable:4324)
// 'enumeration': a forward declaration of an unscoped enumeration must have an
// underlying type (int assumed)
#pragma warning(disable:4471)
#endif

VEIL_BEGIN()



typedef struct RAW_SMBIOS_DATA
{
    UINT8 Used20CallingMethod;
    UINT8 SMBIOSMajorVersion;
    UINT8 SMBIOSMinorVersion;
    UINT8 DmiRevision;
    ULONG Length;
    UINT8 SMBIOSTableData[ANYSIZE_ARRAY];
} RAW_SMBIOS_DATA, * PRAW_SMBIOS_DATA;

#include <pshpack1.h>

#define SMBIOS_INVALID_HANDLE  ((USHORT)0x0FFFF)
#define SMBIOS_INVALID_STRING  ((UINT8)0)
#define SMBIOS_STRING_TABLE(x) (PVOID)((ULONG_PTR)x + x->Length)

#define SMBIOS_PROBE_STATUS_OTHER                     ((UINT8)1)
#define SMBIOS_PROBE_STATUS_UNKNOWN                   ((UINT8)2)
#define SMBIOS_PROBE_STATUS_OK                        ((UINT8)3)
#define SMBIOS_PROBE_STATUS_NON_CRITICAL              ((UINT8)4)
#define SMBIOS_PROBE_STATUS_CRITICAL                  ((UINT8)5)
#define SMBIOS_PROBE_STATUS_NON_RECOVERABLE           ((UINT8)6)

#define SMBIOS_MEMORY_ERROR_TYPE_OTHER                ((UINT8)1)
#define SMBIOS_MEMORY_ERROR_TYPE_UNKNOWN              ((UINT8)2)
#define SMBIOS_MEMORY_ERROR_TYPE_OK                   ((UINT8)3)
#define SMBIOS_MEMORY_ERROR_TYPE_BAD_READ             ((UINT8)4)
#define SMBIOS_MEMORY_ERROR_TYPE_PARITY               ((UINT8)5)
#define SMBIOS_MEMORY_ERROR_TYPE_SINGLE_BIT           ((UINT8)6)
#define SMBIOS_MEMORY_ERROR_TYPE_DOUBLE_BIT           ((UINT8)7)
#define SMBIOS_MEMORY_ERROR_TYPE_MULTI_BIT            ((UINT8)8)
#define SMBIOS_MEMORY_ERROR_TYPE_NIBBLE               ((UINT8)9)
#define SMBIOS_MEMORY_ERROR_TYPE_CHECKSUM             ((UINT8)10)
#define SMBIOS_MEMORY_ERROR_TYPE_CRC                  ((UINT8)11)
#define SMBIOS_MEMORY_ERROR_TYPE_CORRECTED_SINGLE_BIT ((UINT8)12)
#define SMBIOS_MEMORY_ERROR_TYPE_CORRECTED            ((UINT8)13)
#define SMBIOS_MEMORY_ERROR_TYPE_UNCORRECTABLE        ((UINT8)14)

#define SMBIOS_MEMORY_ERROR_GRANULARITY_OTHER         ((UINT8)1)
#define SMBIOS_MEMORY_ERROR_GRANULARITY_UNKNOWN       ((UINT8)2)
#define SMBIOS_MEMORY_ERROR_GRANULARITY_DEVICE        ((UINT8)3)
#define SMBIOS_MEMORY_ERROR_GRANULARITY_PARTITION     ((UINT8)4)

#define SMBIOS_MEMORY_ERROR_OPERATION_OTHER           ((UINT8)1)
#define SMBIOS_MEMORY_ERROR_OPERATION_UNKNOWN         ((UINT8)2)
#define SMBIOS_MEMORY_ERROR_OPERATION_READ            ((UINT8)3)
#define SMBIOS_MEMORY_ERROR_OPERATION_WRITE           ((UINT8)4)
#define SMBIOS_MEMORY_ERROR_OPERATION_PARTIAL_WRITE   ((UINT8)5)

typedef struct _SMBIOS_ENTRY_POINT_2_1
{
    UINT8 Signature[4];             // _SM_ (ASCII)
    UINT8 Checksum;
    UINT8 Length;
    UINT8 MajorVersion;
    UINT8 MinorVersion;
    USHORT MaximumStructureSize;
    UINT8 EntryPointRevision;
    UINT8 Reserved[5];
    UINT8 Signature2[5];           // _DMI_ (ASCII)
    UINT8 IntermediateChecksum;
    USHORT StructureTableLength;
    ULONG StructureTableAddress;
    USHORT NumberStructures;
    UINT8 Revision;
} SMBIOS_ENTRY_POINT_2_1, * PSMBIOS_ENTRY_POINT_2_1;

STATIC_ASSERT(sizeof(SMBIOS_ENTRY_POINT_2_1) == 0X1F);

typedef struct _SMBIOS_ENTRY_POINT_3_0
{
    UINT8 Signature[5];             // _SM3_ (ASCII)
    UINT8 Checksum;
    UINT8 Length;
    UINT8 MajorVersion;
    UINT8 MinorVersion;
    UINT8 DocumentRevision;
    UINT8 EntryPointRevision;
    UINT8 Reserved;
    ULONG MaximumStructureSize;
    ULONGLONG StructureTableAddress;
} SMBIOS_ENTRY_POINT_3_0, * PSMBIOS_ENTRY_POINT_3_0;

STATIC_ASSERT(sizeof(SMBIOS_ENTRY_POINT_3_0) == 0x18);

typedef struct _SMBIOS_HEADER
{
    UINT8 Type;
    UINT8 Length;
    USHORT Handle;
} SMBIOS_HEADER, * PSMBIOS_HEADER;

STATIC_ASSERT(sizeof(SMBIOS_HEADER) == 4);

typedef struct _SMBIOS_GENERIC
{
    UCHAR  Type;
    UCHAR  Length;
    USHORT Handle;
    UCHAR  Data[ANYSIZE_ARRAY];
} SMBIOS_GENERIC, * PSMBIOS_GENERIC;

//
// Platform Firmware Information (Type 0)
//

#define SMBIOS_FIRMWARE_INFORMATION_TYPE ((UINT8)0)

typedef struct _SMBIOS_FIRMWARE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 Vendor;                  // string
    UINT8 Version;                 // string
    USHORT StartingAddressSegment;
    UINT8 ReleaseDate;             // string
    UINT8 RomSize;
    ULONGLONG Characteristics;     // SMBIOS_FIRMWARE_FLAG_*
    // 2.4+
    USHORT Characteristics2;       // SMBIOS_FIRMWARE_FLAG_2_*
    UINT8 MajorRelease;
    UINT8 MinorRelease;
    UINT8 ControllerMajorRelease;
    UINT8 ControllerMinorRelease;
    // 3.1+
    union
    {
        struct
        {
            USHORT Unit : 2;       // SMBIOS_FIRMWARE_ROM_UNIT_*
            USHORT Size : 14;
        };

        USHORT Value;
    } RomSize2;
} SMBIOS_FIRMWARE_INFORMATION, * PSMBIOS_FIRMWARE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_FIRMWARE_INFORMATION) == 0x1A);

#define SMBIOS_FIRMWARE_FLAG_RESERVED_0                   0x0000000000000001UL
#define SMBIOS_FIRMWARE_FLAG_RESERVED_1                   0x0000000000000002UL
#define SMBIOS_FIRMWARE_FLAG_UNKNOWN                      0x0000000000000004UL
#define SMBIOS_FIRMWARE_FLAG_NOT_SUPPORTED                0x0000000000000008UL
#define SMBIOS_FIRMWARE_FLAG_ISA_SUPPORTED                0x0000000000000010UL
#define SMBIOS_FIRMWARE_FLAG_MCA_SUPPORTED                0x0000000000000020UL
#define SMBIOS_FIRMWARE_FLAG_EISA_SUPPORTED               0x0000000000000040UL
#define SMBIOS_FIRMWARE_FLAG_PCI_SUPPORTED                0x0000000000000080UL
#define SMBIOS_FIRMWARE_FLAG_PCMCIA_SUPPORTED             0x0000000000000100UL
#define SMBIOS_FIRMWARE_FLAG_PNP_SUPPORTED                0x0000000000000200UL
#define SMBIOS_FIRMWARE_FLAG_APM_SUPPORTED                0x0000000000000400UL
#define SMBIOS_FIRMWARE_FLAG_UPGRADE_SUPPORTED            0x0000000000000800UL
#define SMBIOS_FIRMWARE_FLAG_SHADOWING_SUPPORTED          0x0000000000001000UL
#define SMBIOS_FIRMWARE_FLAG_VL_VESA_SUPPORTED            0x0000000000002000UL
#define SMBIOS_FIRMWARE_FLAG_ESCD_SUPPORTED               0x0000000000004000UL
#define SMBIOS_FIRMWARE_FLAG_BOOT_FROM_CD_SUPPORTED       0x0000000000008000UL
#define SMBIOS_FIRMWARE_FLAG_SELECTABLE_BOOT_SUPPORTED    0x0000000000010000UL
#define SMBIOS_FIRMWARE_FLAG_ROM_SOCKETED                 0x0000000000020000UL
#define SMBIOS_FIRMWARE_FLAG_PCMCIA_BOOT_SUPPORTED        0x0000000000040000UL
#define SMBIOS_FIRMWARE_FLAG_EDD_SUPPORTED                0x0000000000080000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_NEC_9800_SUPPORTED    0x0000000000100000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_TOSHIBA_SUPPORTED     0x0000000000200000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_5_25_360KB_SUPPORTED  0x0000000000400000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_5_25_1_2_MB_SUPPORTED 0x0000000000800000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_3_5_720KB_SUPPORTED   0x0000000001000000UL
#define SMBIOS_FIRMWARE_FLAG_FLOPPY_3_5_2_88MB_SUPPORTED  0x0000000002000000UL
#define SMBIOS_FIRMWARE_FLAG_PRINT_SCREEN_SUPPORTED       0x0000000004000000UL
#define SMBIOS_FIRMWARE_FLAG_8042_KEYBOARD_SUPPORTED      0x0000000008000000UL
#define SMBIOS_FIRMWARE_FLAG_SERIAL_SUPPORTED             0x0000000010000000UL
#define SMBIOS_FIRMWARE_FLAG_PRINTER_SUPPORTED            0x0000000020000000UL
#define SMBIOS_FIRMWARE_FLAG_CGA_VIDEO_SUPPORTED          0x0000000040000000UL
#define SMBIOS_FIRMWARE_FLAG_NEC_PC_98                    0x0000000080000000UL
#define SMBIOS_FIRMWARE_FLAG_PLATFORM_RESERVED            0x0000FFFF00000000UL
#define SMBIOS_FIRMWARE_FLAG_SYSTEM_RESERVED              0xFFFF000000000000UL

#define SMBIOS_FIRMWARE_FLAG_2_ACPI_SUPPORTED                 ((USHORT)0x0001)
#define SMBIOS_FIRMWARE_FLAG_2_USB_LEGACY_SUPPORTED           ((USHORT)0x0002)
#define SMBIOS_FIRMWARE_FLAG_2_AGP_SUPPORTED                  ((USHORT)0x0004)
#define SMBIOS_FIRMWARE_FLAG_2_I20_BOOT_SUPPORTED             ((USHORT)0x0008)
#define SMBIOS_FIRMWARE_FLAG_2_LS_120_BOOT_SUPPORTED          ((USHORT)0x0010)
#define SMBIOS_FIRMWARE_FLAG_2_ZIP_BOOT_SUPPORTED             ((USHORT)0x0020)
#define SMBIOS_FIRMWARE_FLAG_2_1394_BOOT_SUPPORTED            ((USHORT)0x0040)
#define SMBIOS_FIRMWARE_FLAG_2_SMART_BATTERY_SUPPORTED        ((USHORT)0x0080)
#define SMBIOS_FIRMWARE_FLAG_2_BIOS_BOOT_SUPPORTED            ((USHORT)0x0100)
#define SMBIOS_FIRMWARE_FLAG_2_FN_KEY_NET_BOOT_SUPPORTED      ((USHORT)0x0200)
#define SMBIOS_FIRMWARE_FLAG_2_CONTENT_DISTRIBUTION_SUPPORTED ((USHORT)0x0400)
#define SMBIOS_FIRMWARE_FLAG_2_UEFI_SUPPORTED                 ((USHORT)0x0800)
#define SMBIOS_FIRMWARE_FLAG_2_MANUFACTURING_MODE_ENABLED     ((USHORT)0x1000)
#define SMBIOS_FIRMWARE_FLAG_2_RESERVED                       ((USHORT)0xE000)

#define SMBIOS_FIRMWARE_ROM_UNIT_MB         0
#define SMBIOS_FIRMWARE_ROM_UNIT_GB         1
#define SMBIOS_FIRMWARE_ROM_UNIT_RESERVED_1 2
#define SMBIOS_FIRMWARE_ROM_UNIT_RESERVED_2 3

//
// System Information (Type 1)
//

#define SMBIOS_SYSTEM_INFORMATION_TYPE ((UINT8)1)

typedef struct _SMBIOS_SYSTEM_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 Manufacturer; // string
    UINT8 ProductName;  // string
    UINT8 Version;      // string
    UINT8 SerialNumber; // string
    // 2.1+
    GUID UniqueID;
    UINT8 WakeUpType;   // SMBIOS_SYSTEM_WAKE_UP_TYPE
    // 2.4+
    UINT8 SKUNumber;    // string
    UINT8 Family;       // string
} SMBIOS_SYSTEM_INFORMATION, * PSMBIOS_SYSTEM_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_INFORMATION) == 0x1B);

#define SMBIOS_SYSTEM_WAKE_UP_TYPE_RESERVED     ((UINT8)0)
#define SMBIOS_SYSTEM_WAKE_UP_TYPE_OTHER        ((UINT8)1)
#define SMBIOS_SYSTEM_WAKE_UP_UNKNOWN           ((UINT8)2)
#define SMBIOS_SYSTEM_WAKE_UP_APM_TIMER         ((UINT8)3)
#define SMBIOS_SYSTEM_WAKE_UP_MODEM_RING        ((UINT8)4)
#define SMBIOS_SYSTEM_WAKE_UP_LAN_REMOTE        ((UINT8)5)
#define SMBIOS_SYSTEM_WAKE_UP_POWER_SWITCH      ((UINT8)6)
#define SMBIOS_SYSTEM_WAKE_UP_PCI_PME           ((UINT8)7)
#define SMBIOS_SYSTEM_WAKE_UP_AC_POWER_RESTORED ((UINT8)8)

//
// Baseboard (or Module) Information (Type 2)
//

#define SMBIOS_BASEBOARD_INFORMATION_TYPE ((UINT8)2)

typedef struct _SMBIOS_BASEBOARD_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 Manufacturer;            // string
    UINT8 Product;                 // string
    UINT8 Version;                 // string
    UINT8 SerialNumber;            // string
    UINT8 AssetTag;                // string
    UINT8 Features;                // SMBIOS_BASEBOARD_FEATURE_*
    UINT8 Location;                // string
    USHORT ChassisHandle;
    UINT8 BoardType;               // SMBIOS_BASEBOARD_TYPE_*
    UINT8 NumberOfHandles;
    USHORT Handles[ANYSIZE_ARRAY]; // Contained object handles (processors, ports, memory, etc.)
} SMBIOS_BASEBOARD_INFORMATION, * PSMBIOS_BASEBOARD_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_BASEBOARD_INFORMATION) == 0x11);

#define SMBIOS_BASEBOARD_FEATURE_HOSTING_BOARD           ((UINT8)0x01)
#define SMBIOS_BASEBOARD_FEATURE_REQUIRES_DAUGHTER_BOARD ((UINT8)0x02)
#define SMBIOS_BASEBOARD_FEATURE_REMOVABLE_BOARD         ((UINT8)0x04)
#define SMBIOS_BASEBOARD_FEATURE_REPLACEABLE_BOARD       ((UINT8)0x08)
#define SMBIOS_BASEBOARD_FEATURE_HOT_SWAP_BOARD          ((UINT8)0x10)
#define SMBIOS_BASEBOARD_FEATURE_RESERVED                ((UINT8)0xE0)

#define SMBIOS_BASEBOARD_TYPE_UNKNOWN                    ((UINT8)1)
#define SMBIOS_BASEBOARD_TYPE_OTHER                      ((UINT8)2)
#define SMBIOS_BASEBOARD_TYPE_SERVER_BLADE               ((UINT8)3)
#define SMBIOS_BASEBOARD_TYPE_CONNECTIVITY_SWITCH        ((UINT8)4)
#define SMBIOS_BASEBOARD_TYPE_SYSTEM_MANAGEMENT_MODULE   ((UINT8)5)
#define SMBIOS_BASEBOARD_TYPE_PROCESSOR_MODULE           ((UINT8)6)
#define SMBIOS_BASEBOARD_TYPE_IO_MODULE                  ((UINT8)7)
#define SMBIOS_BASEBOARD_TYPE_MEMORY_MODULE              ((UINT8)8)
#define SMBIOS_BASEBOARD_TYPE_DAUGHTER_BOARD             ((UINT8)9)
#define SMBIOS_BASEBOARD_TYPE_MOTHERBOARD                ((UINT8)10)
#define SMBIOS_BASEBOARD_TYPE_PROCESSOR_MEMORY_MODULE    ((UINT8)11)
#define SMBIOS_BASEBOARD_TYPE_PROCESSOR_IO_MODULE        ((UINT8)12)
#define SMBIOS_BASEBOARD_TYPE_INTERCONNECT               ((UINT8)13)

//
// System Enclosure or Chassis (Type 3)
//

#define SMBIOS_CHASSIS_INFORMATION_TYPE ((UINT8)3)

typedef struct _SMBIOS_CHASSIS_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 Manufacturer;       // string
    union
    {
        struct
        {
            UINT8 Type : 7;   // SMBIOS_CHASSIS_TYPE_*
            UINT8 Locked : 1;
        };

        UINT8 Value;
    } Chassis;

    UINT8 Version;            // string
    UINT8 SerialNumber;       // string
    UINT8 AssetTag;           // string
    // 2.1+
    UINT8 BootUpState;        // SMBIOS_CHASSIS_STATE_*
    UINT8 PowerSupplyState;   // SMBIOS_CHASSIS_STATE_*
    UINT8 ThermalState;       // SMBIOS_CHASSIS_STATE_*
    UINT8 SecurityState;      // SMBIOS_CHASSIS_SECURITY_STATE_*
    // 2.3+
    ULONG OEMDefined;
    UINT8 Height;
    UINT8 NumberOfPowerCords;
    UINT8 ElementCount;
    UINT8 ElementLength;
    UINT8 Elements[ANYSIZE_ARRAY]; // ElementCount * ElementLength, SMBIOS_CHASSIS_CONTAINED_ELEMENT
    // 2.7+
    // SMBIOS_CHASSIS_INFORMATION_EX
} SMBIOS_CHASSIS_INFORMATION, * PSMBIOS_CHASSIS_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_CHASSIS_INFORMATION) == 0x16);

typedef struct _SMBIOS_CHASSIS_INFORMATION_EX
{
    // 2.7+
    UINT8 SKUNumber; // string
} SMBIOS_CHASSIS_INFORMATION_EX, * PSMBIOS_CHASSIS_INFORMATION_EX;

typedef struct _SMBIOS_CHASSIS_CONTAINED_ELEMENT
{
    // 2.3+
    union
    {
        struct
        {
            UINT8 Type : 7;   // SMBIOS_*_INFORMATION_TYPE or SM_BIOS_BASEBOARD_TYPE_*
            UINT8 Select : 1; // 1 = SMBIOS_*_INFORMATION_TYPE, 0 = SM_BIOS_BASEBOARD_TYPE_*
        };

        UINT8 Value;
    } Type;

    UINT8 ElementMinimum;
    UINT8 ElementMaximum;
} SMBIOS_CHASSIS_CONTAINED_ELEMENT, * PSMBIOS_CHASSIS_CONTAINED_ELEMENT;

STATIC_ASSERT(sizeof(SMBIOS_CHASSIS_CONTAINED_ELEMENT) == 0x3);

#define SMBIOS_CHASSIS_TYPE_OTHER               1
#define SMBIOS_CHASSIS_TYPE_UNKNOWN             2
#define SMBIOS_CHASSIS_TYPE_DESKTOP             3
#define SMBIOS_CHASSIS_TYPE_LOW_PROFILE_DESKTOP 4
#define SMBIOS_CHASSIS_TYPE_PIZZA_BOX           5
#define SMBIOS_CHASSIS_TYPE_MINI_TOWER          6
#define SMBIOS_CHASSIS_TYPE_TOWER               7
#define SMBIOS_CHASSIS_TYPE_PORTABLE            8
#define SMBIOS_CHASSIS_TYPE_LAPTOP              9
#define SMBIOS_CHASSIS_TYPE_NOTEBOOK            10
#define SMBIOS_CHASSIS_TYPE_HAND_HELD           11
#define SMBIOS_CHASSIS_TYPE_DOCKING_STATION     12
#define SMBIOS_CHASSIS_TYPE_ALL_IN_ONE          13
#define SMBIOS_CHASSIS_TYPE_SUB_NOTEBOOK        14
#define SMBIOS_CHASSIS_TYPE_SPACE_SAVING        15
#define SMBIOS_CHASSIS_TYPE_LUNCH_BOX           16
#define SMBIOS_CHASSIS_TYPE_MAIN_SERVER         17
#define SMBIOS_CHASSIS_TYPE_EXPANSION           18
#define SMBIOS_CHASSIS_TYPE_SUB                 19
#define SMBIOS_CHASSIS_TYPE_BUS_EXPANSION       20
#define SMBIOS_CHASSIS_TYPE_PERIPHERAL          21
#define SMBIOS_CHASSIS_TYPE_RAID                22
#define SMBIOS_CHASSIS_TYPE_RACK_MOUNT          23
#define SMBIOS_CHASSIS_TYPE_SEALED_CASE_PC      24
#define SMBIOS_CHASSIS_TYPE_MULTI_SYSTEM        25
#define SMBIOS_CHASSIS_TYPE_COMPACT_PCI         26
#define SMBIOS_CHASSIS_TYPE_ADVANCED_TCA        27
#define SMBIOS_CHASSIS_TYPE_BLADE               28
#define SMBIOS_CHASSIS_TYPE_BLADE_ENCLOSURE     29
#define SMBIOS_CHASSIS_TYPE_TABLET              30
#define SMBIOS_CHASSIS_TYPE_CONVERTIBLE         31
#define SMBIOS_CHASSIS_TYPE_DETACHABLE          32
#define SMBIOS_CHASSIS_TYPE_IOT_GATEWAY         33
#define SMBIOS_CHASSIS_TYPE_EMBEDDED_PC         34
#define SMBIOS_CHASSIS_TYPE_MINI_PC             35
#define SMBIOS_CHASSIS_TYPE_STICK_PC            36

#define SMBIOS_CHASSIS_STATE_OTHER           ((UINT8)1)
#define SMBIOS_CHASSIS_STATE_UNKNOWN         ((UINT8)2)
#define SMBIOS_CHASSIS_STATE_SAFE            ((UINT8)3)
#define SMBIOS_CHASSIS_STATE_WARNING         ((UINT8)4)
#define SMBIOS_CHASSIS_STATE_CRITICAL        ((UINT8)5)
#define SMBIOS_CHASSIS_STATE_NON_RECOVERABLE ((UINT8)6)

#define SMBIOS_CHASSIS_SECURITY_STATE_OTHER      ((UINT8)1)
#define SMBIOS_CHASSIS_SECURITY_STATE_UNKNOWN    ((UINT8)2)
#define SMBIOS_CHASSIS_SECURITY_STATE_NONE       ((UINT8)3)
#define SMBIOS_CHASSIS_SECURITY_STATE_LOCKED_OUT ((UINT8)4)
#define SMBIOS_CHASSIS_SECURITY_STATE_ENABLED    ((UINT8)5)

//
// Processor Information (Type 4)
//

#define SMBIOS_PROCESSOR_INFORMATION_TYPE ((UINT8)4)

typedef struct _SMBIOS_PROCESSOR_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 SocketDesignation; // string
    UINT8 Type;              // SMBIOS_PROCESSOR_TYPE_*
    UINT8 Family;            // SMBIOS_PROCESSOR_FAMILY_*
    UINT8 Manufacturer;      // string
    ULONGLONG Identifier;
    UINT8 Version;           // string

    union
    {
        struct
        {
            UINT8 Capable5000mV : 1; // 5V
            UINT8 Capable3500mV : 1; // 3.3V
            UINT8 Capable2900mV : 1; // 2.9V
            UINT8 Reserved : 4;
            UINT8 Mode : 1;          // 0 = Legacy Mode
        };

        UINT8 Value;
    } Voltage;

    USHORT ExternalClock;
    USHORT MaxSpeed;
    USHORT CurrentSpeed;

    union
    {
        struct
        {
            UINT8 Status : 3;    // SMBIOS_PROCESSOR_STATUS_*
            UINT8 Reserved : 3;
            UINT8 Populated : 1;
            UINT8 Reserved2 : 1;
        };

        UINT8 Value;
    } Status;

    UINT8 Upgrade;          // SMBIOS_PROCESSOR_UPGRADE_*
    // 2.1+
    USHORT L1CacheHandle;
    USHORT L2CacheHandle;
    USHORT L3CacheHandle;
    // 2.3+
    UINT8 SerialNumber;     // string
    UINT8 AssetTag;         // string
    UINT8 PartNumber;       // string
    // 2.5+
    UINT8 CoreCount;
    UINT8 CoresEnabled;
    UINT8 ThreadCount;
    USHORT Characteristics; // SMBIOS_PROCESSOR_FLAG_*
    // 2.6+
    USHORT Family2;         // SMBIOS_PROCESSOR_FAMILY_*
    // 3.0+
    USHORT CoreCount2;
    USHORT CoresEnabled2;
    USHORT ThreadCount2;
    // 3.6+
    USHORT ThreadsEnabled;
    // 3.8+
    UINT8 SocketType;       // string
} SMBIOS_PROCESSOR_INFORMATION, * PSMBIOS_PROCESSOR_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_PROCESSOR_INFORMATION) == 0x33);

#define SMBIOS_PROCESSOR_TYPE_OTHER   ((UINT8)1)
#define SMBIOS_PROCESSOR_TYPE_UNKNOWN ((UINT8)2)
#define SMBIOS_PROCESSOR_TYPE_CENTRAL ((UINT8)3)
#define SMBIOS_PROCESSOR_TYPE_MATH    ((UINT8)4)
#define SMBIOS_PROCESSOR_TYPE_DSP     ((UINT8)5)
#define SMBIOS_PROCESSOR_TYPE_VIDEO   ((UINT8)6)

#define SMBIOS_PROCESSOR_FAMILY_OTHER 1
#define SMBIOS_PROCESSOR_FAMILY_UNKNOWN 2
#define SMBIOS_PROCESSOR_FAMILY_8086 3
#define SMBIOS_PROCESSOR_FAMILY_80286 4
#define SMBIOS_PROCESSOR_FAMILY_INTEL386_PROCESSOR 5
#define SMBIOS_PROCESSOR_FAMILY_INTEL486_PROCESSOR 6
#define SMBIOS_PROCESSOR_FAMILY_8087 7
#define SMBIOS_PROCESSOR_FAMILY_80287 8
#define SMBIOS_PROCESSOR_FAMILY_80387 9
#define SMBIOS_PROCESSOR_FAMILY_80487 10
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PENTIUM_PROCESSOR 11
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_PRO_PROCESSOR 12
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_II_PROCESSOR 13
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_PROCESSOR_WITH_MMX_TECHNOLOGY 14
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CELERON_PROCESSOR 15
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_II_XEON_PROCESSOR 16
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_III_PROCESSOR 17
#define SMBIOS_PROCESSOR_FAMILY_M1_FAMILY 18
#define SMBIOS_PROCESSOR_FAMILY_M2_FAMILY 19
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CELERON_M_PROCESSOR 20
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR 21
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PROCESSOR 22
// 23 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_AMD_DURON_PROCESSOR_FAMILY 24
#define SMBIOS_PROCESSOR_FAMILY_K5_FAMILY 25
#define SMBIOS_PROCESSOR_FAMILY_K6_FAMILY 26
#define SMBIOS_PROCESSOR_FAMILY_K6_2 27
#define SMBIOS_PROCESSOR_FAMILY_K6_3 28
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_PROCESSOR_FAMILY 29
#define SMBIOS_PROCESSOR_FAMILY_AMD29000_FAMILY 30
#define SMBIOS_PROCESSOR_FAMILY_K6_2_PLUS 31
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_FAMILY 32
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_601 33
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_603 34
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_603_PLUS 35
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_604 36
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_620 37
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_X704 38
#define SMBIOS_PROCESSOR_FAMILY_POWER_PC_750 39
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_DUO_PROCESSOR 40
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR 41
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR 42
#define SMBIOS_PROCESSOR_FAMILY_INTEL_ATOM_PROCESSOR 43
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_M_PROCESSOR 44
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_M3_PROCESSOR 45
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_M5_PROCESSOR 46
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_M7_PROCESSOR 47
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_FAMILY 48
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21064 49
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21066 50
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21164 51
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21164PC 52
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21164A 53
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21264 54
#define SMBIOS_PROCESSOR_FAMILY_ALPHA_21364 55
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_II_ULTRA_DUAL_CORE_MOBILE_M_PROCESSOR_FAMILY 56
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_II_DUAL_CORE_MOBILE_M_PROCESSOR_FAMILY 57
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_II_DUAL_CORE_M_PROCESSOR_FAMILY 58
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR 59
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR 60
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR 61
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR 62
#define SMBIOS_PROCESSOR_FAMILY_AMD_FX_SERIES_PROCESSOR 63
#define SMBIOS_PROCESSOR_FAMILY_MIPS_FAMILY 64
#define SMBIOS_PROCESSOR_FAMILY_MIPS_R4000 65
#define SMBIOS_PROCESSOR_FAMILY_MIPS_R4200 66
#define SMBIOS_PROCESSOR_FAMILY_MIPS_R4400 67
#define SMBIOS_PROCESSOR_FAMILY_MIPS_R4600 68
#define SMBIOS_PROCESSOR_FAMILY_MIPS_R10000 69
#define SMBIOS_PROCESSOR_FAMILY_AMD_C_SERIES_PROCESSOR 70
#define SMBIOS_PROCESSOR_FAMILY_AMD_E_SERIES_PROCESSOR 71
#define SMBIOS_PROCESSOR_FAMILY_AMD_A_SERIES_PROCESSOR 72
#define SMBIOS_PROCESSOR_FAMILY_AMD_G_SERIES_PROCESSOR 73
#define SMBIOS_PROCESSOR_FAMILY_AMD_Z_SERIES_PROCESSOR 74
#define SMBIOS_PROCESSOR_FAMILY_AMD_R_SERIES_PROCESSOR 75
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR 76
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR 77
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR 78
#define SMBIOS_PROCESSOR_FAMILY_AMD_FIREPRO_SERIES_PROCESSOR 79
#define SMBIOS_PROCESSOR_FAMILY_SPARC_FAMILY 80
#define SMBIOS_PROCESSOR_FAMILY_SUPERSPARC 81
#define SMBIOS_PROCESSOR_FAMILY_MICROSPARC_II 82
#define SMBIOS_PROCESSOR_FAMILY_MICROSPARC_IIep 83
#define SMBIOS_PROCESSOR_FAMILY_ULTRASPARC 84
#define SMBIOS_PROCESSOR_FAMILY_ULTRASPARC_II 85
#define SMBIOS_PROCESSOR_FAMILY_ULTRASPARC_Iii 86
#define SMBIOS_PROCESSOR_FAMILY_ULTRASPARC_III 87
#define SMBIOS_PROCESSOR_FAMILY_ULTRASPARC_IIIi 88
// 89-95 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_68040_FAMILY 96
#define SMBIOS_PROCESSOR_FAMILY_68XXX 97
#define SMBIOS_PROCESSOR_FAMILY_68000 98
#define SMBIOS_PROCESSOR_FAMILY_68010 99
#define SMBIOS_PROCESSOR_FAMILY_68020 100
#define SMBIOS_PROCESSOR_FAMILY_68030 101
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY 102
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR 103
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_X2000_SERIES_APU 104
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR 105
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_X3000_SERIES_APU 106
#define SMBIOS_PROCESSOR_FAMILY_AMD_ZEN_PROCESSOR_FAMILY 107
// 108-111 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_HOBBIT_FAMILY 112
// 113-119 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_CRUSOE_TM5000_FAMILY 120
#define SMBIOS_PROCESSOR_FAMILY_CRUSOE_TM3000_FAMILY 121
#define SMBIOS_PROCESSOR_FAMILY_EFFICEON_TM8000_FAMILY 122
// 123-127 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_WEITEK 128
// 129 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_ITANIUM_PROCESSOR 130
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY 131
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_PROCESSOR_FAMILY 132
#define SMBIOS_PROCESSOR_FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY 133
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY 134
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_AMD_OPTERON_PROCESSOR_FAMILY 135
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY 136
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY 137
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_AMD_OPTERON_PROCESSOR_FAMILY 138
#define SMBIOS_PROCESSOR_FAMILY_THIRD_GENERATION_AMD_OPTERON_PROCESSOR_FAMILY 139
#define SMBIOS_PROCESSOR_FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY 140
#define SMBIOS_PROCESSOR_FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY 141
#define SMBIOS_PROCESSOR_FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY 142
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY 143
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_FAMILY 144
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_8500 145
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_8000 146
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_7300LC 147
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_7200 148
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_7100LC 149
#define SMBIOS_PROCESSOR_FAMILY_PA_RISC_7100 150
// 151-159 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_V30_FAMILY 160
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_3200_SERIES 161
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_3000_SERIES 162
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_5300_SERIES 163
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_5100_SERIES 164
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_5000_SERIES 165
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_LV 166
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_ULV 167
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_7100_SERIES 168
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_5400_SERIES 169
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR 170
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_5200_SERIES 171
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_7200_SERIES 172
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_7300_SERIES 173
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_7400_SERIES 174
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_INTEL_XEON_PROCESSOR_7400_SERIES 175
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_III_XEON_PROCESSOR 176
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_III_PROCESSOR_WITH_INTEL_SPEEDSTEP_TECHNOLOGY 177
#define SMBIOS_PROCESSOR_FAMILY_PENTIUM_4_PROCESSOR 178
#define SMBIOS_PROCESSOR_FAMILY_INTEL_XEON_PROCESSOR 179
#define SMBIOS_PROCESSOR_FAMILY_AS400_FAMILY 180
#define SMBIOS_PROCESSOR_FAMILY_INTEL_XEON_PROCESSOR_MP 181
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY 182
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY 183
#define SMBIOS_PROCESSOR_FAMILY_INTEL_ITANIUM_2_PROCESSOR 184
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PENTIUM_M_PROCESSOR 185
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CELERON_D_PROCESSOR 186
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PENTIUM_D_PROCESSOR 187
#define SMBIOS_PROCESSOR_FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION 188
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_SOLO_PROCESSOR 189
#define SMBIOS_PROCESSOR_FAMILY_RESERVED 190
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_DUO_PROCESSOR 191
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_SOLO_PROCESSOR 192
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR 193
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_QUAD_PROCESSOR 194
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR 195
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR 196
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR 197
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_I7_PROCESSOR 198
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_CELERO_PROCESSOR 199
#define SMBIOS_PROCESSOR_FAMILY_IBM390_FAMILY 200
#define SMBIOS_PROCESSOR_FAMILY_G4 201
#define SMBIOS_PROCESSOR_FAMILY_G5 202
#define SMBIOS_PROCESSOR_FAMILY_ESA_390_G6 203
#define SMBIOS_PROCESSOR_FAMILY_Z_ARCHITECTURE_BASE 204
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_I5_PROCESSOR 205
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_I3_PROCESSOR 206
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_I9_PROCESSOR 207
#define SMBIOS_PROCESSOR_FAMILY_INTEL_XEON_D_PROCESSOR_FAMILY 208
// 209 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_VIA_C7_M_PROCESSOR_FAMILY 210
#define SMBIOS_PROCESSOR_FAMILY_VIA_C7_D_PROCESSOR_FAMILY 211
#define SMBIOS_PROCESSOR_FAMILY_VIA_C7_PROCESSOR_FAMILY 212
#define SMBIOS_PROCESSOR_FAMILY_VIA_EDEN_PROCESSOR_FAMILY 213
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_INTEL_XEON_PROCESSOR 214
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_3XXX_SERIES 215
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_3XXX_SERIES 216
#define SMBIOS_PROCESSOR_FAMILY_VIA_NANO_PROCESSOR_FAMILY 217
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_5XXX_SERIES 218
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_5XXX_SERIES 219
// 220 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_INTEL_XEON_PROCESSOR_7XXX_SERIES 221
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_INTEL_XEON_PROCESSOR_7XXX_SERIES 222
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_INTEL_XEON_PROCESSOR_7XXX_SERIES 223
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_INTEL_XEON_PROCESSOR_3400_SERIES 224
// 225-227 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_AMD_OPTERON_3000_SERIES_PROCESSOR 228
#define SMBIOS_PROCESSOR_FAMILY_AMD_SEMPRON_II_PROCESSOR 229
#define SMBIOS_PROCESSOR_FAMILY_EMBEDDED_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY 230
#define SMBIOS_PROCESSOR_FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY 231
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY 232
#define SMBIOS_PROCESSOR_FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY 233
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY 234
#define SMBIOS_PROCESSOR_FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY 235
#define SMBIOS_PROCESSOR_FAMILY_AMD_PHENOM_II_PROCESSOR_FAMILY 236
#define SMBIOS_PROCESSOR_FAMILY_AMD_ATHLON_II_PROCESSOR_FAMILY 237
#define SMBIOS_PROCESSOR_FAMILY_SIX_CORE_AMD_OPTERON_PROCESSOR_FAMILY 238
#define SMBIOS_PROCESSOR_FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY 239
// 240-249 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_I860 250
#define SMBIOS_PROCESSOR_FAMILY_I960 251
// 252-253 - Available for assignment
#define SMBIOS_PROCESSOR_FAMILY_USE_2ND_FIELD 254
// 255 RESERVED
// 256-511 - Available for assignment, except for:
#define SMBIOS_PROCESSOR_FAMILY_ARMV7 256
#define SMBIOS_PROCESSOR_FAMILY_ARMV8 257
#define SMBIOS_PROCESSOR_FAMILY_ARMV9 258
// 259 - Reserved for future use by ARM
#define SMBIOS_PROCESSOR_FAMILY_SH_3 260
#define SMBIOS_PROCESSOR_FAMILY_SH_4 261
#define SMBIOS_PROCESSOR_FAMILY_ARM 280
#define SMBIOS_PROCESSOR_FAMILY_STRONGARM 281
#define SMBIOS_PROCESSOR_FAMILY_6X86 300
#define SMBIOS_PROCESSOR_FAMILY_MEDIAGX 301
#define SMBIOS_PROCESSOR_FAMILY_MII 302
#define SMBIOS_PROCESSOR_FAMILY_WINCHIP 320
#define SMBIOS_PROCESSOR_FAMILY_DSP 350
#define SMBIOS_PROCESSOR_FAMILY_VIDEO_PROCESSOR 500
// 512-767 - Available for assignment, except for:
#define SMBIOS_PROCESSOR_FAMILY_RISC_V_RV32 512
#define SMBIOS_PROCESSOR_FAMILY_RISC_V_RV64 513
#define SMBIOS_PROCESSOR_FAMILY_RISC_V_RV128 514
#define SMBIOS_PROCESSOR_FAMILY_LOONGARCH 600
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_1_PROCESSOR_FAMILY 601
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_2_PROCESSOR_FAMILY 602
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3_PROCESSOR_FAMILY 603
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_2K_PROCESSOR_FAMILY 604
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3A_PROCESSOR_FAMILY 605
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3B_PROCESSOR_FAMILY 606
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3C_PROCESSOR_FAMILY 607
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3D_PROCESSOR_FAMILY 608
#define SMBIOS_PROCESSOR_FAMILY_LOONGSON_3E_PROCESSOR_FAMILY 609
#define SMBIOS_PROCESSOR_FAMILY_DUAL_CORE_LOONGSON_2K_PROCESSOR_2XXX_SERIES 610
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_LOONGSON_3A_PROCESSOR_5XXX_SERIES 620
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_LOONGSON_3A_PROCESSOR_5XXX_SERIES 621
#define SMBIOS_PROCESSOR_FAMILY_QUAD_CORE_LOONGSON_3B_PROCESSOR_5XXX_SERIES 622
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_LOONGSON_3B_PROCESSOR_5XXX_SERIES 623
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_LOONGSON_3C_PROCESSOR_5XXX_SERIES 624
#define SMBIOS_PROCESSOR_FAMILY_MULTI_CORE_LOONGSON_3D_PROCESSOR_5XXX_SERIES 625
// 768-1023 - Available for assignment, except for:
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_3 768
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_5 769
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_7 770
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_9 771
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_ULTRA_3 772
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_ULTRA_5 773
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_ULTRA_7 774
#define SMBIOS_PROCESSOR_FAMILY_INTEL_CORE_ULTRA_9 775
// 1024-65533 - Available for assignment
// 65534–65535 - RESERVED

#define SMBIOS_PROCESSOR_STATUS_UNKNOWN              0
#define SMBIOS_PROCESSOR_STATUS_ENABLED              1
#define SMBIOS_PROCESSOR_STATUS_DISABLED_BY_USER     2
#define SMBIOS_PROCESSOR_STATUS_DISABLED_BY_FIRMWARE 3
#define SMBIOS_PROCESSOR_STATUS_IDLE                 4
#define SMBIOS_PROCESSOR_STATUS_RESERVED_5           5
#define SMBIOS_PROCESSOR_STATUS_RESERVED_6           6
#define SMBIOS_PROCESSOR_STATUS_OTHER                7

#define SMBIOS_PROCESSOR_UPGRADE_OTHER 1
#define SMBIOS_PROCESSOR_UPGRADE_UNKNOWN 2
#define SMBIOS_PROCESSOR_UPGRADE_DAUGHTER_BOARD 3
#define SMBIOS_PROCESSOR_UPGRADE_ZIF_SOCKET 4
#define SMBIOS_PROCESSOR_UPGRADE_REPLACEABLE_PIGGY_BACK 5
#define SMBIOS_PROCESSOR_UPGRADE_NONE 6
#define SMBIOS_PROCESSOR_UPGRADE_LIF_SOCKET 7
#define SMBIOS_PROCESSOR_UPGRADE_SLOT_1 8
#define SMBIOS_PROCESSOR_UPGRADE_SLOT_2 9
#define SMBIOS_PROCESSOR_UPGRADE_370_PIN_SOCKET 10
#define SMBIOS_PROCESSOR_UPGRADE_SLOT_A 11
#define SMBIOS_PROCESSOR_UPGRADE_SLOT_M 12
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_423 13
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_A 14 // (Socket 462)
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_478 15
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_754 16
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_940 17
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_939 18
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_MPGA604 19
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA771 20
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA775 21
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_S1 22
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_AM2 23
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_F 24 // (1207)
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1366 25
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_G34 26
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_AM3 27
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_C32 28
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1156 29
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1567 30
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_PGA988A 31
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1288 32
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_RPGA988B 33
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1023 34
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1224 35
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1155 36
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1356 37
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA2011 38
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_FS1 39
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_FS2 40
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_FM1 41
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_FM2 42
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA2011_3 43
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1356_3 44
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1150 45
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1168 46
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1234 47
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1364 48
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_AM4 49
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1151 50
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1356 51
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1440 52
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1515 53
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA3647_1 54
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_SP3 55
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_SP3R2 56
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA2066 57
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1392 58
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1510 59
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1528 60
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA4189 61
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1200 62
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA4677 63
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1700 64
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1744 65
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1781 66
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1211 67
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA2422 68
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1211 69
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA2422 70
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA5773 71
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA5773 72
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_AM5 73
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_SP5 74
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_SP6 75
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA883 76
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1190 77
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA4129 78
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA4710 79
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA7529 80
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1964 81
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA1792 82
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA2049 83
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA2551 84
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_LGA1851 85
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA2114 86
#define SMBIOS_PROCESSOR_UPGRADE_SOCKET_BGA2833 87
#define SMBIOS_PROCESSOR_UPGRADE_INVALID 255

#define SMBIOS_PROCESSOR_FLAG_RESERVED                  ((USHORT)0x0001)
#define SMBIOS_PROCESSOR_FLAG_UNKNOWN                   ((USHORT)0x0002)
#define SMBIOS_PROCESSOR_FLAG_64_BIT_CAPABLE            ((USHORT)0x0004)
#define SMBIOS_PROCESSOR_FLAG_MILT_CORE                 ((USHORT)0x0008)
#define SMBIOS_PROCESSOR_FLAG_HARDWARE_THREADED         ((USHORT)0x0010)
#define SMBIOS_PROCESSOR_FLAG_EXECUTE_PROTECTION        ((USHORT)0x0020)
#define SMBIOS_PROCESSOR_FLAG_ENHANCED_VIRTUALIZATION   ((USHORT)0x0040)
#define SMBIOS_PROCESSOR_FLAG_POWER_PERFORMANCE_CONTROL ((USHORT)0x0080)
#define SMBIOS_PROCESSOR_FLAG_128_BIT_CAPABLE           ((USHORT)0x0100)
#define SMBIOS_PROCESSOR_FLAG_ARM64_SOC                 ((USHORT)0x0200)
#define SMBIOS_PROCESSOR_FLAG_RESERVED_2                ((USHORT)0xFC00)

//
// Memory Controller Information (Type 5, Obsolete)
//

#define SMBIOS_MEMORY_CONTROLLER_INFORMATION_TYPE ((UINT8)5)

typedef struct _SMBIOS_MEMORY_CONTROLLER_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 ErrorDetectionMethod;        // SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_*
    UINT8 ErrorCorrectionCapabilities; // SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_*
    UINT8 SupportedInterleave;         // SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_*
    UINT8 CurrentInterleave;           // SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_*
    UINT8 MaximumModuleSize;           // 2^n
    USHORT SupportedSpeeds;            // SMBIOS_MEMORY_CONTROLLER_SPEEDS_*
    USHORT SupportedTypes;             // SMBIOS_MEMORY_MODULE_TYPE_*

    union
    {
        struct
        {
            UINT8 Requires5000mV : 1; // 5V
            UINT8 Requires3500mV : 1; // 3.3V
            UINT8 Requires2900mV : 1; // 2.9V
            UINT8 Reserved : 5;
        };

        UINT8 Value;
    } ModuleVoltage;

    UINT8 NumberOfSlots;
    USHORT SlotHandles[ANYSIZE_ARRAY];
    // 2.1+
    // SMBIOS_MEMORY_CONTROLLER_INFORMATION_EX
} SMBIOS_MEMORY_CONTROLLER_INFORMATION, * PSMBIOS_MEMORY_CONTROLLER_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_CONTROLLER_INFORMATION) == 0x11);

typedef struct _SMBIOS_MEMORY_CONTROLLER_INFORMATION_EX
{
    UINT8 EnabledErrorCorrectionCapabilities; // SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_*
} SMBIOS_MEMORY_CONTROLLER_INFORMATION_EX, * PSMBIOS_MEMORY_CONTROLLER_INFORMATION_EX;

#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_OTHER        ((UINT8)1)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_UNKNOWN      ((UINT8)2)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_NONE         ((UINT8)3)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_8_BIT_PARITY ((UINT8)4)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_32_BIT_ECC   ((UINT8)5)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_64_BIT_ECC   ((UINT8)6)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_128_BIT_ECC  ((UINT8)7)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_DETECTION_CRC          ((UINT8)8)

#define SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_OTHER       ((UINT8)0x01)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_UNKNOWN     ((UINT8)0x02)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_SINGLE_BIT  ((UINT8)0x04)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_DOUBLE_BIT  ((UINT8)0x10)
#define SMBIOS_MEMORY_CONTROLLER_ERROR_CORRECTION_SCRUBBING   ((UINT8)0x20)

#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_OTHER             ((UINT8)1)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_UNKNOWN           ((UINT8)2)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_ONE_WAY           ((UINT8)3)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_TWO_WAY           ((UINT8)4)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_FOUR_WAY          ((UINT8)5)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_EIGHT_WAY         ((UINT8)6)
#define SMBIOS_MEMORY_CONTROLLER_INTERLEAVE_SIXTEEN_WAY       ((UINT8)7)

#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_OTHER                 ((USHORT)0x0001)
#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_UNKNOWN               ((USHORT)0x0002)
#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_70NS                  ((USHORT)0x0004)
#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_60NS                  ((USHORT)0x0008)
#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_50NS                  ((USHORT)0x0010)
#define SMBIOS_MEMORY_CONTROLLER_SPEEDS_RESERVED              ((USHORT)0xFFE0)

//
// Memory Module Information (Type 6, Obsolete)
//

#define SMBIOS_MEMORY_MODULE_INFORMATION_TYPE ((UINT8)6)

typedef union _SMBIOS_MEMORY_MODULE_SIZE
{
    struct
    {
        UINT8 Size : 7;
        UINT8 DoubleBank : 1;
    };

    UINT8 Value; // SMBIOS_MEMORY_MODULE_SIZE_VALUE_*
} SMBIOS_MEMORY_MODULE_SIZE, * PSMBIOS_MEMORY_MODULE_SIZE;

#define SMBIOS_MEMORY_MODULE_SIZE_VALUE_NOT_DETERMINABLE ((UINT8)0x7D)
#define SMBIOS_MEMORY_MODULE_SIZE_VALUE_NOT_ENABLED      ((UINT8)0x7E)
#define SMBIOS_MEMORY_MODULE_SIZE_VALUE_NOT_INSTALLED    ((UINT8)0x7F)

typedef struct _SMBIOS_MEMORY_MODULE_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 SocketDesignation; // string
    UINT8 BankConnections;
    UINT8 CurrentSpeed;
    USHORT MemoryType;       // SMBIOS_MEMORY_MODULE_TYPE_*
    SMBIOS_MEMORY_MODULE_SIZE InstalledSize;
    SMBIOS_MEMORY_MODULE_SIZE EnabledSize;

    union
    {
        struct
        {
            UINT8 UncorrectableErrors : 1;
            UINT8 CorrectableErrors : 1;
            UINT8 SeeEventLog : 1;
            UINT8 Reserved : 5;
        };

        UINT8 Value;
    } ErrorStatus;
} SMBIOS_MEMORY_MODULE_INFORMATION, * PSMBIOS_MEMORY_MODULE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_MODULE_INFORMATION) == 0xC);

#define SMBIOS_MEMORY_MODULE_TYPE_OTHER          ((USHORT)0x0001)
#define SMBIOS_MEMORY_MODULE_TYPE_UNKNOWN        ((USHORT)0x0002)
#define SMBIOS_MEMORY_MODULE_TYPE_STANDARD       ((USHORT)0x0004)
#define SMBIOS_MEMORY_MODULE_TYPE_FAST_PAGE_MODE ((USHORT)0x0008)
#define SMBIOS_MEMORY_MODULE_TYPE_EDO            ((USHORT)0x0010)
#define SMBIOS_MEMORY_MODULE_TYPE_PARITY         ((USHORT)0x0020)
#define SMBIOS_MEMORY_MODULE_TYPE_ECC            ((USHORT)0x0040)
#define SMBIOS_MEMORY_MODULE_TYPE_SIMM           ((USHORT)0x0080)
#define SMBIOS_MEMORY_MODULE_TYPE_DIMM           ((USHORT)0x0100)
#define SMBIOS_MEMORY_MODULE_TYPE_BURST_EDO      ((USHORT)0x0200)
#define SMBIOS_MEMORY_MODULE_TYPE_SDRAM          ((USHORT)0x0400)
#define SMBIOS_MEMORY_MODULE_TYPE_RESERVED       ((USHORT)0xF800)

//
// Cache Information (Type 7)
//

#define SMBIOS_CACHE_INFORMATION_TYPE ((UINT8)7)

typedef union _SMBIOS_CACHE_USHORT
{
    struct
    {
        USHORT Size : 15;
        USHORT Granularity : 1; // 0 = 1K, 1 = 64K
    };

    USHORT Value;
} SMBIOS_CACHE_USHORT;

typedef union _SMBIOS_CACHE_ULONG
{
    struct
    {
        ULONG Size : 31;
        ULONG Granularity : 1; // 0 = 1K, 1 = 64K
    };

    ULONG Value;
} SMBIOS_CACHE_ULONG;

typedef struct _SMBIOS_CACHE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 SocketDesignation;      // string

    union
    {
        struct
        {
            USHORT Level : 3;     // L1 through L8
            USHORT Socketed : 1;
            USHORT Reserved : 1;
            USHORT Location : 2;  // SMBIOS_CACHE_LOCATION_*
            USHORT Enabled : 1;
            USHORT Mode : 2;      // SMBIOS_CACHE_MODE_*
            USHORT Reserved2 : 6;
        };

        USHORT Value;
    } Configuration;

    SMBIOS_CACHE_USHORT MaximumSize;
    SMBIOS_CACHE_USHORT InstalledSize;
    USHORT SupportedSRAM;         // SMBIOS_CACHE_SUPPORTED_SRAM_*
    USHORT CurrentSRAM;           // SMBIOS_CACHE_SUPPORTED_SRAM_*
    // 2.1+
    UINT8 Speed;
    UINT8 ErrorCorrectionType;    // SMBIOS_CACHE_ERROR_CORRECTION_*
    UINT8 SystemCacheType;        // SMBIOS_CACHE_SYSTEM_CACHE_*
    UINT8 Associativity;          // SMBIOS_CACHE_ASSOCIATIVITY_*
    // 3.1+
    SMBIOS_CACHE_ULONG MaximumSize2;
    SMBIOS_CACHE_ULONG InstalledSize2;
} SMBIOS_CACHE_INFORMATION, * PSMBIOS_CACHE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_CACHE_INFORMATION) == 0x1B);

#define SMBIOS_CACHE_LOCATION_INTERNAL               ((USHORT)0)
#define SMBIOS_CACHE_LOCATION_EXTERNAL               ((USHORT)1)
#define SMBIOS_CACHE_LOCATION_RESERVED               ((USHORT)2)
#define SMBIOS_CACHE_LOCATION_UNKNOWN                ((USHORT)3)

#define SMBIOS_CACHE_MODE_WRITE_THROUGH              ((USHORT)0)
#define SMBIOS_CACHE_MODE_WRITE_BACK                 ((USHORT)1)
#define SMBIOS_CACHE_MODE_VARIES_WITH_MEMORY_ADDRESS ((USHORT)2)
#define SMBIOS_CACHE_MODE_UNKNOWN                    ((USHORT)3)

#define SMBIOS_CACHE_SUPPORTED_SRAM_OTHER            ((USHORT)0x0001)
#define SMBIOS_CACHE_SUPPORTED_SRAM_UNKNOWN          ((USHORT)0x0002)
#define SMBIOS_CACHE_SUPPORTED_SRAM_NON_BURST        ((USHORT)0x0004)
#define SMBIOS_CACHE_SUPPORTED_SRAM_BURST            ((USHORT)0x0008)
#define SMBIOS_CACHE_SUPPORTED_SRAM_PIPELINE_BURST   ((USHORT)0x0010)
#define SMBIOS_CACHE_SUPPORTED_SRAM_SYNCHRONOUS      ((USHORT)0x0020)
#define SMBIOS_CACHE_SUPPORTED_SRAM_ASYNCHRONOUS     ((USHORT)0x0040)
#define SMBIOS_CACHE_SUPPORTED_SRAM_RESERVED         ((USHORT)0xFF80)

#define SMBIOS_CACHE_ERROR_CORRECTION_OTHER          ((UINT8)1)
#define SMBIOS_CACHE_ERROR_CORRECTION_UNKNOWN        ((UINT8)2)
#define SMBIOS_CACHE_ERROR_CORRECTION_NONE           ((UINT8)3)
#define SMBIOS_CACHE_ERROR_CORRECTION_PARITY         ((UINT8)4)
#define SMBIOS_CACHE_ERROR_CORRECTION_SINGLE_BIT_ECC ((UINT8)5)
#define SMBIOS_CACHE_ERROR_CORRECTION_MULTI_BIT_ECC  ((UINT8)6)

#define SMBIOS_CACHE_SYSTEM_CACHE_OTHER              ((UINT8)1)
#define SMBIOS_CACHE_SYSTEM_CACHE_UNKNOWN            ((UINT8)2)
#define SMBIOS_CACHE_SYSTEM_CACHE_INSTRUCTION        ((UINT8)3)
#define SMBIOS_CACHE_SYSTEM_CACHE_DATA               ((UINT8)4)
#define SMBIOS_CACHE_SYSTEM_CACHE_UNIFIED            ((UINT8)5)

#define SMBIOS_CACHE_ASSOCIATIVITY_OTHER             ((UINT8)1)
#define SMBIOS_CACHE_ASSOCIATIVITY_UNKNOWN           ((UINT8)2)
#define SMBIOS_CACHE_ASSOCIATIVITY_DIRECT_MAPPED     ((UINT8)3)
#define SMBIOS_CACHE_ASSOCIATIVITY_2_WAY             ((UINT8)4)
#define SMBIOS_CACHE_ASSOCIATIVITY_4_WAY             ((UINT8)5)
#define SMBIOS_CACHE_ASSOCIATIVITY_FULL              ((UINT8)6)
#define SMBIOS_CACHE_ASSOCIATIVITY_8_WAY             ((UINT8)7)
#define SMBIOS_CACHE_ASSOCIATIVITY_16_WAY            ((UINT8)8)
#define SMBIOS_CACHE_ASSOCIATIVITY_12_WAY            ((UINT8)9)
#define SMBIOS_CACHE_ASSOCIATIVITY_24_WAY            ((UINT8)10)
#define SMBIOS_CACHE_ASSOCIATIVITY_32_WAY            ((UINT8)11)
#define SMBIOS_CACHE_ASSOCIATIVITY_48_WAY            ((UINT8)12)
#define SMBIOS_CACHE_ASSOCIATIVITY_64_WAY            ((UINT8)13)
#define SMBIOS_CACHE_ASSOCIATIVITY_20_WAY            ((UINT8)14)

//
// Port Connector Information (Type 8)
//

#define SMBIOS_PORT_CONNECTOR_INFORMATION_TYPE ((UINT8)8)

typedef struct _SMBIOS_PORT_CONNECTOR_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 InternalReferenceDesignator; // string
    UINT8 InternalConnectorType;       // SMBIOS_PORT_CONNECTOR_TYPE_*
    UINT8 ExternalReferenceDesignator; // string
    UINT8 ExternalConnectorType;       // SMBIOS_PORT_CONNECTOR_TYPE_*
    UINT8 PortType;                    // SMBIOS_PORT_CONNECTOR_PORT_TYPE_*
} SMBIOS_PORT_CONNECTOR_INFORMATION, * PSMBIOS_PORT_CONNECTOR_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_PORT_CONNECTOR_INFORMATION) == 0x9);

#define SMBIOS_PORT_CONNECTOR_TYPE_NONE                    ((UINT8)0)
#define SMBIOS_PORT_CONNECTOR_TYPE_CENTRONICS              ((UINT8)1)
#define SMBIOS_PORT_CONNECTOR_TYPE_MINI_CENTRONICS         ((UINT8)2)
#define SMBIOS_PORT_CONNECTOR_TYPE_PROPRIETARY             ((UINT8)3)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_25_PIN_MALE          ((UINT8)4)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_25_PIN_FEMALE        ((UINT8)5)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_15_PIN_MALE          ((UINT8)6)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_15_PIN_FEMALE        ((UINT8)7)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_9_PIN_MALE           ((UINT8)8)
#define SMBIOS_PORT_CONNECTOR_TYPE_DB_9_PIN_FEMALE         ((UINT8)9)
#define SMBIOS_PORT_CONNECTOR_TYPE_RJ_11                   ((UINT8)10)
#define SMBIOS_PORT_CONNECTOR_TYPE_RJ_54                   ((UINT8)11)
#define SMBIOS_PORT_CONNECTOR_TYPE_50_PIN_MINI_SCSI        ((UINT8)12)
#define SMBIOS_PORT_CONNECTOR_TYPE_MINI_DIN                ((UINT8)13)
#define SMBIOS_PORT_CONNECTOR_TYPE_MICRO_DIN               ((UINT8)14)
#define SMBIOS_PORT_CONNECTOR_TYPE_PS2                     ((UINT8)15)
#define SMBIOS_PORT_CONNECTOR_TYPE_INFRARED                ((UINT8)16)
#define SMBIOS_PORT_CONNECTOR_TYPE_HP_HIL                  ((UINT8)17)
#define SMBIOS_PORT_CONNECTOR_TYPE_USB                     ((UINT8)18)
#define SMBIOS_PORT_CONNECTOR_TYPE_SSA_SCSI                ((UINT8)19)
#define SMBIOS_PORT_CONNECTOR_TYPE_CIRCULAR_DIN_8_MALE     ((UINT8)20)
#define SMBIOS_PORT_CONNECTOR_TYPE_CIRCULAR_DIN_8_FEMALE   ((UINT8)21)
#define SMBIOS_PORT_CONNECTOR_TYPE_ON_BOARD_IDE            ((UINT8)22)
#define SMBIOS_PORT_CONNECTOR_TYPE_ON_BOARD_FLOPPY         ((UINT8)23)
#define SMBIOS_PORT_CONNECTOR_TYPE_9_PIN_DIAL_INLINE       ((UINT8)24)
#define SMBIOS_PORT_CONNECTOR_TYPE_25_PIN_DIAL_INLINE      ((UINT8)25)
#define SMBIOS_PORT_CONNECTOR_TYPE_50_PIN_DIAL_INLINE      ((UINT8)26)
#define SMBIOS_PORT_CONNECTOR_TYPE_68_PIN_DIAL_INLINE      ((UINT8)27)
#define SMBIOS_PORT_CONNECTOR_TYPE_ON_BOARD_INPUT_CD_ROM   ((UINT8)28)
#define SMBIOS_PORT_CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_14 ((UINT8)29)
#define SMBIOS_PORT_CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_26 ((UINT8)30)
#define SMBIOS_PORT_CONNECTOR_TYPE_MINI_JACK               ((UINT8)31)
#define SMBIOS_PORT_CONNECTOR_TYPE_BNC                     ((UINT8)32)
#define SMBIOS_PORT_CONNECTOR_TYPE_1394                    ((UINT8)33)
#define SMBIOS_PORT_CONNECTOR_TYPE_SAS_SATA                ((UINT8)34)
#define SMBIOS_PORT_CONNECTOR_TYPE_USB_TYPE_C              ((UINT8)35)
#define SMBIOS_PORT_CONNECTOR_TYPE_PC_98                   ((UINT8)160)
#define SMBIOS_PORT_CONNECTOR_TYPE_PC_98_HIRESO            ((UINT8)161)
#define SMBIOS_PORT_CONNECTOR_TYPE_PC_H98                  ((UINT8)162)
#define SMBIOS_PORT_CONNECTOR_TYPE_PC_98_NOTE              ((UINT8)163)
#define SMBIOS_PORT_CONNECTOR_TYPE_PC_98_FULL              ((UINT8)164)
#define SMBIOS_PORT_CONNECTOR_TYPE_OTHER                   ((UINT8)255)

#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_NONE               ((UINT8)0)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PARALLEL_XT_AT     ((UINT8)1)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PARALLEL_PS2       ((UINT8)2)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PARALLEL_ECP       ((UINT8)3)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PARALLEL_EPP       ((UINT8)4)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PARALLEL_ECP_EPP   ((UINT8)5)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SERIAL_XT_AT       ((UINT8)6)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SERIAL_16450       ((UINT8)7)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SERIAL_16550       ((UINT8)8)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SERIAL_16550A      ((UINT8)9)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SCSI               ((UINT8)10)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_MIDI               ((UINT8)11)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_JOY_STICK          ((UINT8)12)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_KEYBOARD           ((UINT8)13)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_MOUSE              ((UINT8)14)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SSA_SCSI           ((UINT8)15)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_USB                ((UINT8)16)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_FIRE_WIRE          ((UINT8)17)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PCMCIA_TYPE_I      ((UINT8)18)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PCMCIA_TYPE_II     ((UINT8)19)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PCMCIA_TYPE_III    ((UINT8)20)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_CARD_BUS           ((UINT8)21)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_ACCESS_BUS         ((UINT8)22)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SCSI_II            ((UINT8)23)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SCSI_WIDE          ((UINT8)24)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PC_98              ((UINT8)25)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PC_98_HIRESO       ((UINT8)26)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_PC_98H             ((UINT8)27)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_VIDEO              ((UINT8)28)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_AUDIO              ((UINT8)29)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_MODEM              ((UINT8)30)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_NETWORK            ((UINT8)31)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SATA               ((UINT8)32)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_SAS                ((UINT8)33)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_MFDP               ((UINT8)34)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_THUNDERBOLT        ((UINT8)35)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_8251               ((UINT8)160)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_8251_FIFO          ((UINT8)161)
#define SMBIOS_PORT_CONNECTOR_PORT_TYPE_8251_OTHER         ((UINT8)255)

//
// System Slots (Type 9)
//

#define SMBIOS_SYSTEM_SLOT_INFORMATION_TYPE ((UINT8)9)

typedef struct _SMBIOS_SYSTEM_SLOT_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 SocketDesignation; // string
    UINT8 Type;              // SMBIOS_SYSTEM_SLOT_TYPE_*
    UINT8 BusWidth;          // SMBIOS_SYSTEM_SLOT_BUS_WIDTH_*
    UINT8 CurrentUsage;      // SMBIOS_SYSTEM_SLOT_USAGE_*
    UINT8 Length;            // SMBIOS_SYSTEM_SLOT_LENGTH_*
    USHORT Identifier;
    UINT8 Characteristics;   // SMBIOS_SYSTEM_SLOT_FLAG_*
    // 2.1+
    UINT8 Characteristics2;  // SMBIOS_SYSTEM_SLOT_FLAG_2_*
    // 2.6+
    USHORT SegmentGroup;
    UINT8 BusNumber;

    union
    {
        struct
        {
            UINT8 FunctionNumber : 3;
            UINT8 DeviceNumber : 5;
        };

        UINT8 Value;
    } DeviceFunctionNumber;

    // 3.2+
    UINT8 BusWidthBase;
    UINT8 PeerGroupingCount;
    UINT8 PeerGroups[ANYSIZE_ARRAY];
    // 3.4+
    // SMBIOS_SYSTEM_SLOT_INFORMATION_EX
} SMBIOS_SYSTEM_SLOT_INFORMATION, * PSMBIOS_SYSTEM_SLOT_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_SLOT_INFORMATION) == 0x14);

typedef struct _SMBIOS_SYSTEM_SLOT_INFORMATION_EX
{
    UINT8 Information;
    UINT8 PhysicalWidth;
    USHORT Pitch;
    UINT8 Height;        // SMBIOS_SYSTEM_SLOT_HEIGHT_*
} SMBIOS_SYSTEM_SLOT_INFORMATION_EX, * PSMBIOS_SYSTEM_SLOT_INFORMATION_EX;

#define SMBIOS_SYSTEM_SLOT_TYPE_OTHER                                             ((UINT8)1)
#define SMBIOS_SYSTEM_SLOT_TYPE_UNKNOWN                                           ((UINT8)2)
#define SMBIOS_SYSTEM_SLOT_TYPE_ISA                                               ((UINT8)3)
#define SMBIOS_SYSTEM_SLOT_TYPE_MCA                                               ((UINT8)4)
#define SMBIOS_SYSTEM_SLOT_TYPE_EISA                                              ((UINT8)5)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI                                               ((UINT8)6)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCMCIA                                            ((UINT8)7)
#define SMBIOS_SYSTEM_SLOT_TYPE_VL_VESA                                           ((UINT8)8)
#define SMBIOS_SYSTEM_SLOT_TYPE_PROPRIETARY                                       ((UINT8)9)
#define SMBIOS_SYSTEM_SLOT_TYPE_PROCESSOR_CARD_SLOT                               ((UINT8)10)
#define SMBIOS_SYSTEM_SLOT_TYPE_PROPRIETARY_MEMORY_CARD_SLOT                      ((UINT8)11)
#define SMBIOS_SYSTEM_SLOT_TYPE_IO_RISER_CARD_SLOT                                ((UINT8)12)
#define SMBIOS_SYSTEM_SLOT_TYPE_NUBUS                                             ((UINT8)13)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_66MHZ_CAPABLE                                 ((UINT8)14)
#define SMBIOS_SYSTEM_SLOT_TYPE_AGP                                               ((UINT8)15)
#define SMBIOS_SYSTEM_SLOT_TYPE_AGP_2X                                            ((UINT8)16)
#define SMBIOS_SYSTEM_SLOT_TYPE_AGP_4X                                            ((UINT8)17)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_X                                             ((UINT8)18)
#define SMBIOS_SYSTEM_SLOT_TYPE_AGP_8X                                            ((UINT8)19)
#define SMBIOS_SYSTEM_SLOT_TYPE_M_2_SOCKET_1_DP_MECHANICAL_KEY_A                  ((UINT8)20)
#define SMBIOS_SYSTEM_SLOT_TYPE_M_2_SOCKET_1_SD_MECHANICAL_KEY_E                  ((UINT8)21)
#define SMBIOS_SYSTEM_SLOT_TYPE_M_2_SOCKET_2_MECHANICAL_KEY_B                     ((UINT8)22)
#define SMBIOS_SYSTEM_SLOT_TYPE_M_2_SOCKET_3_MECHANICAL_KEY_M                     ((UINT8)23)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_TYPE_I                                        ((UINT8)24)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_TYPE_II                                       ((UINT8)25)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_TYPE_III_STANDARD_CONNECTOR                   ((UINT8)26)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_TYPE_III_HE_CONNECTOR                         ((UINT8)27)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_TYPE_IV                                       ((UINT8)28)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_3_0_TYPE_A                                    ((UINT8)29)
#define SMBIOS_SYSTEM_SLOT_TYPE_MXM_3_0_TYPE_B                                    ((UINT8)30)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_SFF_8639_U_2                    ((UINT8)31)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_SFF_8639_U_2                    ((UINT8)32)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_MINI_52_PIN_CEM_2_0_WITH_KEEP_OUTS    ((UINT8)33)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_MINI_52_PIN_CEM_2_0_WITHOUT_KEEP_OUTS ((UINT8)34)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_MINI_76_PIN_CEM_2_0                   ((UINT8)35)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_SFF_8639_U_2                    ((UINT8)36)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_SFF_8639_U_2                    ((UINT8)37)
#define SMBIOS_SYSTEM_SLOT_TYPE_OCP_NIC_3_0_SMALL_FORM_FACTOR_SFF                 ((UINT8)38)
#define SMBIOS_SYSTEM_SLOT_TYPE_OCP_NIC_3_0_LARGE_FORM_FACTOR_LFF                 ((UINT8)39)
#define SMBIOS_SYSTEM_SLOT_TYPE_OCP_NIC_PRIOR_TO_3_0                              ((UINT8)40)
#define SMBIOS_SYSTEM_SLOT_TYPE_CXL_FLEXBUS_1_0                                   ((UINT8)48)
#define SMBIOS_SYSTEM_SLOT_TYPE_PC_98_C20                                         ((UINT8)160)
#define SMBIOS_SYSTEM_SLOT_TYPE_PC_98_C24                                         ((UINT8)161)
#define SMBIOS_SYSTEM_SLOT_TYPE_PC_98_E                                           ((UINT8)162)
#define SMBIOS_SYSTEM_SLOT_TYPE_PC_98_LOCAL_BUS                                   ((UINT8)163)
#define SMBIOS_SYSTEM_SLOT_TYPE_PC_98_CARD                                        ((UINT8)164)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS                                       ((UINT8)165)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_X1                                    ((UINT8)166)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_X2                                    ((UINT8)167)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_X4                                    ((UINT8)168)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_X8                                    ((UINT8)169)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_X16                                   ((UINT8)170)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2                                 ((UINT8)171)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_X1                              ((UINT8)172)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_X2                              ((UINT8)173)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_X4                              ((UINT8)174)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_X8                              ((UINT8)175)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_2_X16                             ((UINT8)176)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3                                 ((UINT8)177)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_X1                              ((UINT8)178)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_X2                              ((UINT8)179)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_X4                              ((UINT8)180)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_X8                              ((UINT8)181)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_3_X16                             ((UINT8)182)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4                                 ((UINT8)183)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_X1                              ((UINT8)184)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_X2                              ((UINT8)185)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_X4                              ((UINT8)186)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_X8                              ((UINT8)187)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_4_X16                             ((UINT8)188)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5                                 ((UINT8)189)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_X1                              ((UINT8)190)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_X2                              ((UINT8)191)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_X4                              ((UINT8)192)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_X8                              ((UINT8)193)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_5_X16                             ((UINT8)194)
#define SMBIOS_SYSTEM_SLOT_TYPE_PCI_EXPRESS_GEN_6                                 ((UINT8)195)
#define SMBIOS_SYSTEM_SLOT_TYPE_EDSFF_E1_S_E1_L                                   ((UINT8)196)
#define SMBIOS_SYSTEM_SLOT_TYPE_EDSFF_E3_S_E3_L                                   ((UINT8)197)

#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_OTHER                                        ((UINT8)1)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_UNKNOWN                                      ((UINT8)2)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_8_BIT                                        ((UINT8)3)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_16_BIT                                       ((UINT8)4)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_32_BIT                                       ((UINT8)5)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_64_BIT                                       ((UINT8)6)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_128_BIT                                      ((UINT8)7)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_1X_OR_1X                                     ((UINT8)8)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_2X_OR_2X                                     ((UINT8)9)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_4X_OR_4X                                     ((UINT8)10)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_8X_OR_8X                                     ((UINT8)11)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_12X_OR_12X                                   ((UINT8)12)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_16X_OR_16X                                   ((UINT8)13)
#define SMBIOS_SYSTEM_SLOT_BUS_WIDTH_32X_OR_32X                                   ((UINT8)14)

#define SMBIOS_SYSTEM_SLOT_USAGE_OTHER                                            ((UINT8)1)
#define SMBIOS_SYSTEM_SLOT_USAGE_UNKNOWN                                          ((UINT8)2)
#define SMBIOS_SYSTEM_SLOT_USAGE_AVAILABLE                                        ((UINT8)3)
#define SMBIOS_SYSTEM_SLOT_USAGE_IN_USE                                           ((UINT8)4)
#define SMBIOS_SYSTEM_SLOT_USAGE_UNAVAILABLE                                      ((UINT8)5)

#define SMBIOS_SYSTEM_SLOT_LENGTH_OTHER                                           ((UINT8)1)
#define SMBIOS_SYSTEM_SLOT_LENGTH_UNKNOWN                                         ((UINT8)2)
#define SMBIOS_SYSTEM_SLOT_LENGTH_SHORT                                           ((UINT8)3)
#define SMBIOS_SYSTEM_SLOT_LENGTH_LONG                                            ((UINT8)4)
#define SMBIOS_SYSTEM_SLOT_LENGTH_2_5_DRIVE                                       ((UINT8)5)
#define SMBIOS_SYSTEM_SLOT_LENGTH_3_4_DRIVE                                       ((UINT8)6)

#define SMBIOS_SYSTEM_SLOT_FLAG_UNKNOWN                                           ((UINT8)0x01)
#define SMBIOS_SYSTEM_SLOT_FLAG_5000MV                                            ((UINT8)0x02)
#define SMBIOS_SYSTEM_SLOT_FLAG_3300MV                                            ((UINT8)0x04)
#define SMBIOS_SYSTEM_SLOT_FLAG_SHARED                                            ((UINT8)0x08)
#define SMBIOS_SYSTEM_SLOT_FLAG_CARD_16                                           ((UINT8)0x10)
#define SMBIOS_SYSTEM_SLOT_FLAG_CARD_BUS                                          ((UINT8)0x20)
#define SMBIOS_SYSTEM_SLOT_FLAG_CARD_ZOOM_VIDEO                                   ((UINT8)0x40)
#define SMBIOS_SYSTEM_SLOT_FLAG_CARD_MODEN_RING_RESUME                            ((UINT8)0x80)

#define SMBIOS_SYSTEM_SLOT_FLAG_2_PME_SIGNAL                                      ((UINT8)0x01)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_HOT_PLUG                                        ((UINT8)0x02)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_SMBUS_SIGNAL                                    ((UINT8)0x04)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_PCIE_BIFURCATION                                ((UINT8)0x08)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_SURPRISE_REMOVAL                                ((UINT8)0x10)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_FLEXBUS_CLX_1                                   ((UINT8)0x20)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_FLEXBUS_CLX_2                                   ((UINT8)0x40)
#define SMBIOS_SYSTEM_SLOT_FLAG_2_FLEXBUS_CLX_4                                   ((UINT8)0x80)

#define SMBIOS_SYSTEM_SLOT_HEIGHT_NOT_APPLICABLE                                  ((UINT8)0)
#define SMBIOS_SYSTEM_SLOT_HEIGHT_OTHER                                           ((UINT8)1)
#define SMBIOS_SYSTEM_SLOT_HEIGHT_UNKNOWN                                         ((UINT8)2)
#define SMBIOS_SYSTEM_SLOT_HEIGHT_FULL_HEIGHT                                     ((UINT8)3)
#define SMBIOS_SYSTEM_SLOT_HEIGHT_LOW_PROFILE                                     ((UINT8)4)

//
// On Board Devices Information (Type 10, Obsolete)
//

#define SMBIOS_ON_BOARD_DEVICE_INFORMATION_TYPE ((UINT8)10)

typedef struct _SMBIOS_ON_BOARD_DEVICE_ENTRY
{
    union
    {
        struct
        {
            UINT8 Type : 7; // SMBIOS_ON_BOARD_DEVICE_TYPE_*
            UINT8 Enabled : 1;
        };

        UINT8 Value;
    } Device;
    UINT8 Description; // string
} SMBIOS_ON_BOARD_DEVICE_ENTRY, * PSMBIOS_ON_BOARD_DEVICE_ENTRY;

typedef struct _SMBIOS_ON_BOARD_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    SMBIOS_ON_BOARD_DEVICE_ENTRY Devices[ANYSIZE_ARRAY]; // (Header.Length - 4) / 2
} SMBIOS_ON_BOARD_DEVICE_INFORMATION, * PSMBIOS_ON_BOARD_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_ON_BOARD_DEVICE_INFORMATION) == 0x6);

#define SMBIOS_ON_BOARD_DEVICE_TYPE_OTHER           ((UINT8)1)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_UNKNOWN         ((UINT8)2)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_VIDEO           ((UINT8)3)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_SCSI_CONTROLLER ((UINT8)4)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_ETHERNET        ((UINT8)5)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_TOKEN_RING      ((UINT8)6)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_SOUND           ((UINT8)7)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_PATA_CONTROLLER ((UINT8)8)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_SATA_CONTROLLER ((UINT8)9)
#define SMBIOS_ON_BOARD_DEVICE_TYPE_SAS_CONTROLLER  ((UINT8)10)

#define SMBIOS_OEM_STRING_INFORMATION_TYPE ((UINT8)11)

//
// OEM Strings (Type 11)
//

typedef struct _SMBIOS_OEM_STRING_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 Count;
} SMBIOS_OEM_STRING_INFORMATION, * PSMBIOS_OEM_STRING_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_OEM_STRING_INFORMATION) == 0x5);

//
// System Configuration Options (Type 12)
//

#define SMBIOS_SYSTEM_CONFIGURATION_OPTION_INFORMATION_TYPE ((UINT8)12)

typedef struct _SMBIOS_SYSTEM_CONFIGURATION_OPTION_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 Count;
} SMBIOS_SYSTEM_CONFIGURATION_OPTION_INFORMATION, * PSMBIOS_SYSTEM_CONFIGURATION_OPTION_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_CONFIGURATION_OPTION_INFORMATION) == 0x5);

//
// Firmware Language Information (Type 13)
//

#define SMBIOS_FIRMWARE_LANGUAGE_INFORMATION_TYPE ((UINT8)13)

typedef struct _SMBIOS_FIRMWARE_LANGUAGE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    UINT8 InstallableLanguages;

    union
    {
        struct
        {
            // 2.1+
            UINT8 AbbreviatedFormat : 1;
            UINT8 Reserved : 7;
        };

        UINT8 Value;
    } Flags;

    UINT8 Reserved[15];
    UINT8 CurrentLanguage; // string
} SMBIOS_FIRMWARE_LANGUAGE_INFORMATION, * PSMBIOS_FIRMWARE_LANGUAGE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_FIRMWARE_LANGUAGE_INFORMATION) == 0x16);

//
// Group Associations (Type 14)
//

#define SMBIOS_GROUP_ASSOCIATION_INFORMATION_TYPE ((UINT8)14)

typedef struct _SMBIOS_GROUP_ASSOCIATION_INFORMATION
{
    SMBIOS_HEADER Header;
    UINT8 Name;        // string
    UINT8 ItemType;
    USHORT ItemHandle;
} SMBIOS_GROUP_ASSOCIATION_INFORMATION, * PSMBIOS_GROUP_ASSOCIATION_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_GROUP_ASSOCIATION_INFORMATION) == 0x8);

//
// System Event Log (Type 15)
//

#define SMBIOS_SYSTEM_EVENT_LOG_INFORMATION_TYPE ((UINT8)15)

typedef struct _SMBIOS_SYSTEM_EVENT_LOG_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.0+
    USHORT AreaLength;
    USHORT HeaderStartOffset;
    USHORT DataStartOffset;
    UINT8 AccessMethod;

    union
    {
        struct
        {
            UINT8 Valid : 1;
            UINT8 Full : 1;
            UINT8 Reserved : 6;
        };

        UINT8 Value;
    } Status;

    ULONG ChangeToken;
    ULONG AccessMethodAddress;
    // 2.1+
    UINT8 HeaderFormat;
    UINT8 NumberOfDescriptors;
    UINT8 LengthOfDescriptors;
    UINT8 Descriptors[ANYSIZE_ARRAY];
} SMBIOS_SYSTEM_EVENT_LOG_INFORMATION, * PSMBIOS_SYSTEM_EVENT_LOG_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_EVENT_LOG_INFORMATION) == 0x18);

//
// Physical Memory Array (Type 16)
//

#define SMBIOS_PHYSICAL_MEMORY_ARRAY_INFORMATION_TYPE ((UINT8)16)

typedef struct _SMBIOS_PHYSICAL_MEMORY_ARRAY_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    UINT8 Location;        // SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_*
    UINT8 Use;             // SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_*
    UINT8 ErrorCorrection; // SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_*
    ULONG MaximumCapacity;
    USHORT ErrorInformationHandle;
    USHORT NumberOfMemoryDevices;
    // 2.7+
    ULONGLONG ExtendedMaximumCapacity;
} SMBIOS_PHYSICAL_MEMORY_ARRAY_INFORMATION, * PSMBIOS_PHYSICAL_MEMORY_ARRAY_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_PHYSICAL_MEMORY_ARRAY_INFORMATION) == 0x17);

#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_OTHER                  ((UINT8)1)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_UNKNOWN                ((UINT8)2)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_MOTHERBOARD            ((UINT8)3)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_ISA                    ((UINT8)4)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_EISA                   ((UINT8)5)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PCI                    ((UINT8)6)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_MCA                    ((UINT8)7)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PCMCIA                 ((UINT8)8)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PROPRIETARY            ((UINT8)9)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_NUBUS                  ((UINT8)10)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PC_98_C20              ((UINT8)160)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PC_98_C24              ((UINT8)161)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PC_98_E                ((UINT8)162)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PC_98_LOCAL_BUS        ((UINT8)163)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_LOCATION_PC_98_CXL              ((UINT8)164)

#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_OTHER                       ((UINT8)1)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_UNKNOWN                     ((UINT8)2)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_SYSTEM                      ((UINT8)3)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_VIDEO                       ((UINT8)4)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_FLASH                       ((UINT8)5)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_NON_VOLATILE                ((UINT8)6)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_USE_CACHE                       ((UINT8)7)

#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_OTHER          ((UINT8)1)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_UNKNOWN        ((UINT8)2)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_NONE           ((UINT8)3)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_PARITY         ((UINT8)4)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_SINGLE_BIT_ECC ((UINT8)5)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_MULTI_BIT_ECC  ((UINT8)6)
#define SMBIOS_PHYSICAL_MEMORY_ARRAY_ERROR_CORRECTION_CRC            ((UINT8)7)

//
// Memory Device (Type 17)
//

#define SMBIOS_MEMORY_DEVICE_INFORMATION_TYPE ((UINT8)17)

typedef struct _SMBIOS_MEMORY_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    USHORT PhysicalArrayHandle;
    USHORT MemoryErrorInformationHandle;
    USHORT TotalWidth;
    USHORT DataWidth;

    union
    {
        struct
        {
            USHORT Size : 15;
            USHORT Granularity : 1; // 0 = megabytes, 1 = kilobytes
        };

        USHORT Value;
    } Size;

    UINT8 FormFactor;        // SMBIOS_MEMORY_DEVICE_FORM_FACTOR_*
    UINT8 DeviceSet;
    UINT8 DeviceLocator;     // string
    UINT8 BankLocator;       // string
    UINT8 MemoryType;        // SMBIOS_MEMORY_DEVICE_TYPE_*
    USHORT TypeDetail;       // SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_*
    USHORT Speed;
    // 2.3+
    UINT8 Manufacturer;      // string
    UINT8 SerialNumber;      // string
    UINT8 AssetTag;          // string
    UINT8 PartNumber;        // string
    // 2.6+

    union
    {
        struct
        {
            UINT8 Rank : 4;
            UINT8 Reserved : 4;
        };

        UINT8 Value;
    } Attributes;

    // 2.7+
    ULONG ExtendedSize;
    USHORT ConfiguredSpeed;
    // 2.8+
    USHORT MinimumVoltage;
    USHORT MaximumVoltage;
    USHORT ConfiguredVoltage;
    // 3.2+
    UINT8 Technology;        // SMBIOS_MEMORY_DEVICE_TECHNOLOGY_*
    USHORT ModeCapabilities; // SMBIOS_MEMORY_DEVICE_MODE_*
    UINT8 FirmwareVersion;   // string
    USHORT ModuleManufacturerID;
    USHORT ModuleProductID;
    USHORT SubsystemControllerManufacturerID;
    USHORT SubsystemControllerProductID;
    ULONGLONG NonVolatileSize;
    ULONGLONG VolatileSize;
    ULONGLONG CacheSize;
    ULONGLONG LogicalSize;
    // 3.3+
    ULONG ExtendedSpeed;
    ULONG ExtendedConfiguredSpeed;
    // 3.7+
    USHORT PMIC0ManufacturerID;
    USHORT PMIC0Revision;
    USHORT RCDManufacturerID;
    USHORT RCDRevision;
} SMBIOS_MEMORY_DEVICE_INFORMATION, * PSMBIOS_MEMORY_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_DEVICE_INFORMATION) == 0x64);

#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_OTHER                ((UINT8)1)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_UNKNOWN              ((UINT8)2)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_SIMM                 ((UINT8)3)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_SIP                  ((UINT8)4)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_CHIP                 ((UINT8)5)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_DIP                  ((UINT8)6)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_ZIP                  ((UINT8)7)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_PROPRIETARY          ((UINT8)8)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_DIMM                 ((UINT8)9)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_TSOP                 ((UINT8)10)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_ROW_OF_CHIPS         ((UINT8)11)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_RIMM                 ((UINT8)12)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_SODIMM               ((UINT8)13)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_SRIMM                ((UINT8)14)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_FB_DIMM              ((UINT8)15)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_DIE                  ((UINT8)16)
#define SMBIOS_MEMORY_DEVICE_FORM_FACTOR_CAMM                 ((UINT8)17)

#define SMBIOS_MEMORY_DEVICE_TYPE_OTHER                       ((UINT8)1)
#define SMBIOS_MEMORY_DEVICE_TYPE_UNKNOWN                     ((UINT8)2)
#define SMBIOS_MEMORY_DEVICE_TYPE_DRAM                        ((UINT8)3)
#define SMBIOS_MEMORY_DEVICE_TYPE_EDRAM                       ((UINT8)4)
#define SMBIOS_MEMORY_DEVICE_TYPE_VRAM                        ((UINT8)5)
#define SMBIOS_MEMORY_DEVICE_TYPE_SRAM                        ((UINT8)6)
#define SMBIOS_MEMORY_DEVICE_TYPE_RAM                         ((UINT8)7)
#define SMBIOS_MEMORY_DEVICE_TYPE_ROM                         ((UINT8)8)
#define SMBIOS_MEMORY_DEVICE_TYPE_FLASH                       ((UINT8)9)
#define SMBIOS_MEMORY_DEVICE_TYPE_EEPROM                      ((UINT8)10)
#define SMBIOS_MEMORY_DEVICE_TYPE_FEPROM                      ((UINT8)11)
#define SMBIOS_MEMORY_DEVICE_TYPE_EPROM                       ((UINT8)12)
#define SMBIOS_MEMORY_DEVICE_TYPE_CDRAM                       ((UINT8)13)
#define SMBIOS_MEMORY_DEVICE_TYPE_3DRAM                       ((UINT8)14)
#define SMBIOS_MEMORY_DEVICE_TYPE_SDRAM                       ((UINT8)15)
#define SMBIOS_MEMORY_DEVICE_TYPE_SGRAM                       ((UINT8)16)
#define SMBIOS_MEMORY_DEVICE_TYPE_RDRAM                       ((UINT8)17)
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR                         ((UINT8)18)
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR2                        ((UINT8)19)
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR2_FB_DIMM                ((UINT8)20)
// 21-23 reserved
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR3                        ((UINT8)24)
#define SMBIOS_MEMORY_DEVICE_TYPE_FBD2                        ((UINT8)25)
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR4                        ((UINT8)26)
#define SMBIOS_MEMORY_DEVICE_TYPE_LPDDR                       ((UINT8)27)
#define SMBIOS_MEMORY_DEVICE_TYPE_LPDDR2                      ((UINT8)28)
#define SMBIOS_MEMORY_DEVICE_TYPE_LPDDR3                      ((UINT8)29)
#define SMBIOS_MEMORY_DEVICE_TYPE_LPDDR4                      ((UINT8)30)
#define SMBIOS_MEMORY_DEVICE_TYPE_LOCAL_NON_VOLATILE          ((UINT8)31)
#define SMBIOS_MEMORY_DEVICE_TYPE_HBM                         ((UINT8)32)
#define SMBIOS_MEMORY_DEVICE_TYPE_HBM2                        ((UINT8)33)
#define SMBIOS_MEMORY_DEVICE_TYPE_DDR5                        ((UINT8)34)
#define SMBIOS_MEMORY_DEVICE_TYPE_LPDDR5                      ((UINT8)35)
#define SMBIOS_MEMORY_DEVICE_TYPE_HBM3                        ((UINT8)36)

#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_RESERVED             ((USHORT)0x0001)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_OTHER                ((USHORT)0x0002)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_UNKNOWN              ((USHORT)0x0004)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_FAST_PAGED           ((USHORT)0x0008)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_STATIC_COL           ((USHORT)0x0010)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_PSEUDO_STATIC        ((USHORT)0x0020)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_RAMBUS               ((USHORT)0x0040)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_SYNCHRONOUS          ((USHORT)0x0080)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_CMOS                 ((USHORT)0x0100)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_EDO                  ((USHORT)0x0200)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_WINDOW_DRAM          ((USHORT)0x0400)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_CACHE_DRAM           ((USHORT)0x0800)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_NON_VOLATILE         ((USHORT)0x1000)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_BUFFERED             ((USHORT)0x2000)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_UNBUFFERED           ((USHORT)0x4000)
#define SMBIOS_MEMORY_DEVICE_TYPE_DETAIL_LRDIMM               ((USHORT)0x8000)

#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_OTHER                 ((UINT8)1)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_UNKNOWN               ((UINT8)2)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_DRAM                  ((UINT8)3)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_NVDIMM_N              ((UINT8)4)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_NVDIMM_F              ((UINT8)5)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_NVDIMM_P              ((UINT8)6)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_INTEL_OPTANE          ((UINT8)7)
#define SMBIOS_MEMORY_DEVICE_TECHNOLOGY_MRDIMM                ((UINT8)8)

#define SMBIOS_MEMORY_DEVICE_MODE_RESERVED                    ((USHORT)0x0001)
#define SMBIOS_MEMORY_DEVICE_MODE_OTHER                       ((USHORT)0x0002)
#define SMBIOS_MEMORY_DEVICE_MODE_UNKNOWN                     ((USHORT)0x0004)
#define SMBIOS_MEMORY_DEVICE_MODE_VOLATILE                    ((USHORT)0x0008)
#define SMBIOS_MEMORY_DEVICE_MODE_BYTE_ACCESSIBLE_PERSISTENT  ((USHORT)0x0010)
#define SMBIOS_MEMORY_DEVICE_MODE_BLOCK_ACCESSIBLE_PERSISTENT ((USHORT)0x0020)
#define SMBIOS_MEMORY_DEVICE_MODE_RESERVED2                   ((USHORT)0xFFC0)

//
// 32-Bit Memory Error Information (Type 18)
//

#define SMBIOS_32_BIT_MEMORY_ERROR_INFORMATION_TYPE ((UINT8)18)

typedef struct _SMBIOS_32_BIT_MEMORY_ERROR_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    UINT8 Type;        // SMBIOS_MEMORY_ERROR_TYPE_*
    UINT8 Granularity; // SMBIOS_MEMORY_ERROR_GRANULARITY_*
    UINT8 Operation;   // SMBIOS_MEMORY_ERROR_OPERATION_*
    ULONG VendorSyndrome;
    ULONG ArrayErrorAddress;
    ULONG DeviceErrorAddress;
    ULONG ErrorResolution;
} SMBIOS_32_BIT_MEMORY_ERROR_INFORMATION, * PSMBIOS_32_BIT_MEMORY_ERROR_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_32_BIT_MEMORY_ERROR_INFORMATION) == 0x17);

//
// Memory Array Mapped Address (Type 19)
//

#define SMBIOS_MEMORY_ARRAY_MAPPED_ADDRESS_INFORMATION_TYPE ((UINT8)19)

typedef struct _SMBIOS_MEMORY_ARRAY_MAPPED_ADDRESS_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    ULONG StartingAddress;
    ULONG EndingAddress;
    USHORT ArrayHandle;
    UINT8 PartitionWidth;
    // 2.7+
    ULONGLONG ExtendedStartingAddress;
    ULONGLONG ExtendedEndingAddress;
} SMBIOS_MEMORY_ARRAY_MAPPED_ADDRESS_INFORMATION, * PSMBIOS_MEMORY_ARRAY_MAPPED_ADDRESS_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_ARRAY_MAPPED_ADDRESS_INFORMATION) == 0x1F);

//
// Memory Device Mapped Address (Type 20)
//

#define SMBIOS_MEMORY_DEVICE_MAPPED_ADDRESS_INFORMATION_TYPE ((UINT8)20)

typedef struct _SMBIOS_MEMORY_DEVICE_MAPPED_ADDRESS_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    ULONG StartingAddress;
    ULONG EndingAddress;
    USHORT DeviceHandle;
    USHORT ArrayMappedAddressHandle;
    UINT8 PartitionRowPosition;
    UINT8 InterleavePosition;
    UINT8 InterleavedDataDepth;
    // 2.7+
    ULONGLONG ExtendedStartingAddress;
    ULONGLONG ExtendedEndingAddress;
} SMBIOS_MEMORY_DEVICE_MAPPED_ADDRESS_INFORMATION, * PSMBIOS_MEMORY_DEVICE_MAPPED_ADDRESS_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_DEVICE_MAPPED_ADDRESS_INFORMATION) == 0x23);

//
// Built-in Pointing Device (Type 21)
//

#define SMBIOS_BUILT_IN_POINTING_DEVICE_INFORMATION_TYPE ((UINT8)21)

typedef struct _SMBIOS_BUILT_IN_POINTING_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    UINT8 PointerType;      // SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_*
    UINT8 PointerInterface; // SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_*
    UINT8 PointerButtons;
} SMBIOS_BUILT_IN_POINTING_DEVICE_INFORMATION, * PSMBIOS_BUILT_IN_POINTING_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_BUILT_IN_POINTING_DEVICE_INFORMATION) == 0x7);

#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_OTHER          ((UINT8)1)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_UNKNOWN        ((UINT8)2)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_MOUSE          ((UINT8)3)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_TRACK_BALL     ((UINT8)4)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_TRACK_POINT    ((UINT8)5)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_GLIDE_POINT    ((UINT8)6)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_TOUCH_PAD      ((UINT8)7)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_TOUCH_SCREEN   ((UINT8)8)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_TYPE_OPTICAL_SENSOR ((UINT8)9)

#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_OTHER     ((UINT8)1)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_UNKNOWN   ((UINT8)2)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_SERIAL    ((UINT8)3)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_PS2       ((UINT8)4)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_INFRARED  ((UINT8)5)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_HP_HIL    ((UINT8)6)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_BUS_MOUSE ((UINT8)7)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_ADB       ((UINT8)8)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_DB_9      ((UINT8)160)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_MICRO_DIN ((UINT8)161)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_USB       ((UINT8)162)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_I2C       ((UINT8)163)
#define SMBIOS_BUILT_IN_POINTING_DEVICE_INTERFACE_SPI       ((UINT8)164)

//
// Portable Battery (Type 22)
//

#define SMBIOS_PORTABLE_BATTERY_INFORMATION_TYPE ((UINT8)22)

typedef struct _SMBIOS_PORTABLE_BATTERY_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.1+
    UINT8 Location;             // string
    UINT8 Manufacturer;         // string
    UINT8 ManufactureDate;      // string
    UINT8 SerialNumber;         // string
    UINT8 DeviceName;           // string
    UINT8 DeviceChemistry;      // SMBIOS_PORTABLE_BATTERY_CHEMISTRY_*
    USHORT DesignCapacity;
    USHORT DesignVoltage;
    UINT8 SBDSVersionNumber;    // string
    UINT8 MaximumError;
    // 2.2+
    USHORT SBDSSerialNumber;

    union
    {
        struct
        {
            USHORT Day : 5;
            USHORT Month : 4;
            USHORT Year : 7;  // Biased by 1980
        };

        USHORT Value;
    } SBDSManufactureDate;

    UINT8 SBDSDeviceChemistry;  // string
    UINT8 DesignCapacityMultiplier;
    ULONG OEMSpecific;
} SMBIOS_PORTABLE_BATTERY_INFORMATION, * PSMBIOS_PORTABLE_BATTERY_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_PORTABLE_BATTERY_INFORMATION) == 0x1A);

#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_OTHER           ((UINT8)1)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_UNKNOWN         ((UINT8)2)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_LEAD_ACID       ((UINT8)3)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_NICKEL_CADMIUM  ((UINT8)4)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_NICKEL_METAL    ((UINT8)5)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_LITHIUM_ION     ((UINT8)6)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_ZINC_AIR        ((UINT8)7)
#define SMBIOS_PORTABLE_BATTERY_CHEMISTRY_LITHIUM_POLYMER ((UINT8)8)

//
// System Reset (Type 23)
//

#define SMBIOS_SYSTEM_RESET_INFORMATION_TYPE ((UINT8)23)

typedef struct _SMBIOS_SYSTEM_RESET_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+

    union
    {
        struct
        {
            UINT8 UserEnabled : 1;
            UINT8 WatchdogReset : 2;   // SMBIOS_SYSTEM_RESET_WATCHDOG_*
            UINT8 WatchdogAction : 2;  // SMBIOS_SYSTEM_RESET_WATCHDOG_*
            UINT8 WatchdogExists : 1;
            UINT8 Reserved : 2;
        };

        UINT8 Value;
    } Capabilities;

    USHORT ResetCount;
    USHORT ResetLimit;
    USHORT TimerInterval;
    USHORT Timeout;
} SMBIOS_SYSTEM_RESET_INFORMATION, * PSMBIOS_SYSTEM_RESET_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_RESET_INFORMATION) == 0xD);

#define SMBIOS_SYSTEM_RESET_WATCHDOG_RESERVED         ((UINT8)0)
#define SMBIOS_SYSTEM_RESET_WATCHDOG_OPERATING_SYSTEM ((UINT8)1)
#define SMBIOS_SYSTEM_RESET_WATCHDOG_SYSTEM_UTILITES  ((UINT8)2)
#define SMBIOS_SYSTEM_RESET_WATCHDOG_DO_NOT_REBOOT    ((UINT8)3)

//
// Hardware Security (Type 24)
//

#define SMBIOS_HARDWARE_SECURITY_INFORMATION_TYPE ((UINT8)24)

typedef struct _SMBIOS_HARDWARE_SECURITY_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+

    union
    {
        struct
        {
            UINT8 FrontPanelReset : 2;       // SMBIOS_HARDWARE_SECURITY_SETTING_*
            UINT8 AdministratorPassword : 2; // SMBIOS_HARDWARE_SECURITY_SETTING_*
            UINT8 KeyboardPassword : 2;      // SMBIOS_HARDWARE_SECURITY_SETTING_*
            UINT8 PowerOnPassword : 2;       // SMBIOS_HARDWARE_SECURITY_SETTING_*
        };

        UINT8 Value;
    } HardwareSecuritySettings;
} SMBIOS_HARDWARE_SECURITY_INFORMATION, * PSMBIOS_HARDWARE_SECURITY_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_HARDWARE_SECURITY_INFORMATION) == 0x5);

#define SMBIOS_HARDWARE_SECURITY_SETTING_DISABLED        ((UINT8)0)
#define SMBIOS_HARDWARE_SECURITY_SETTING_ENABLED         ((UINT8)1)
#define SMBIOS_HARDWARE_SECURITY_SETTING_NOT_IMPLEMENTED ((UINT8)2)
#define SMBIOS_HARDWARE_SECURITY_SETTING_UNKNOWN         ((UINT8)3)

//
// System Power Controls (Type 25)
//

#define SMBIOS_SYSTEM_POWER_CONTROLS_INFORMATION_TYPE ((UINT8)25)

typedef struct _SMBIOS_SYSTEM_POWER_CONTROLS_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    UINT8 Month;
    UINT8 Day;
    UINT8 Hour;
    UINT8 Minute;
    UINT8 Second;
} SMBIOS_SYSTEM_POWER_CONTROLS_INFORMATION, * PSMBIOS_SYSTEM_POWER_CONTROLS_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_POWER_CONTROLS_INFORMATION) == 0x9);

//
// Voltage Probe (Type 26)
//

#define SMBIOS_VOLTAGE_PROBE_INFORMATION_TYPE ((UINT8)26)

typedef struct _SMBIOS_VOLTAGE_PROBE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    UINT8 Description; // string

    union
    {
        struct
        {
            UINT8 Location : 5; // SMBIOS_VOLTAGE_PROBE_LOCATION_*
            UINT8 Status : 3;   // SMBIOS_PROBE_STATUS_*
        };

        UINT8 Value;
    } LocationAndStatus;

    USHORT MaximumValue;
    USHORT MinimumValue;
    USHORT Resolution;
    USHORT Tolerance;
    USHORT Accuracy;
    ULONG OEMDefined;
    USHORT NominalValue;
} SMBIOS_VOLTAGE_PROBE_INFORMATION, * PSMBIOS_VOLTAGE_PROBE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_VOLTAGE_PROBE_INFORMATION) == 0x16);

#define SMBIOS_VOLTAGE_PROBE_LOCATION_OTHER                    ((UINT8)1)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_UNKNOWN                  ((UINT8)2)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_PROCESSOR                ((UINT8)3)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_DISK                     ((UINT8)4)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_PERIPHERAL_BAY           ((UINT8)5)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_SYSTEM_MANAGEMENT_MODULE ((UINT8)6)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_MOTHERBOARD              ((UINT8)7)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_MEMORY_MODULE            ((UINT8)8)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_PROCESSOR_MODULE         ((UINT8)9)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_POWER_UNIT               ((UINT8)10)
#define SMBIOS_VOLTAGE_PROBE_LOCATION_ADD_IN_CARD              ((UINT8)11)

//
// Cooling Device (Type 27)
//

#define SMBIOS_COOLING_DEVICE_INFORMATION_TYPE ((UINT8)27)

typedef struct _SMBIOS_COOLING_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    USHORT TemperatureProbeHandle;

    union
    {
        struct
        {
            UINT8 DeviceType : 5; // SMBIOS_COOLING_DEVICE_TYPE_*
            UINT8 Status : 3;     // SMBIOS_COOLING_DEVICE_STATUS_*
        };

        UINT8 Value;
    } DeviceTypeAndStatus;

    UINT8 CoolingUnitGroup;
    ULONG OEMDefined;
    USHORT NominalSpeed;
    // 2.7+
    UINT8 Description; // string
} SMBIOS_COOLING_DEVICE_INFORMATION, * PSMBIOS_COOLING_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_COOLING_DEVICE_INFORMATION) == 0xF);

#define SMBIOS_COOLING_DEVICE_TYPE_OTHER                    ((UINT8)1)
#define SMBIOS_COOLING_DEVICE_TYPE_UNKNOWN                  ((UINT8)2)
#define SMBIOS_COOLING_DEVICE_TYPE_FAN                      ((UINT8)3)
#define SMBIOS_COOLING_DEVICE_TYPE_CENTRIFUGAL_BLOWER       ((UINT8)4)
#define SMBIOS_COOLING_DEVICE_TYPE_CHIP_FAN                 ((UINT8)5)
#define SMBIOS_COOLING_DEVICE_TYPE_CABINET_FAN              ((UINT8)6)
#define SMBIOS_COOLING_DEVICE_TYPE_POWER_SUPPLY_FAN         ((UINT8)7)
#define SMBIOS_COOLING_DEVICE_TYPE_HEAT_PIPE                ((UINT8)8)
#define SMBIOS_COOLING_DEVICE_TYPE_INTEGRATED_REFRIGERATION ((UINT8)9)
#define SMBIOS_COOLING_DEVICE_TYPE_ACTIVE_COOLING           ((UINT8)10)
#define SMBIOS_COOLING_DEVICE_TYPE_PASSIVE_COOLING          ((UINT8)11)

#define SMBIOS_COOLING_DEVICE_STATUS_OTHER                  ((UINT8)1)
#define SMBIOS_COOLING_DEVICE_STATUS_UNKNOWN                ((UINT8)2)
#define SMBIOS_COOLING_DEVICE_STATUS_OK                     ((UINT8)3)
#define SMBIOS_COOLING_DEVICE_STATUS_NON_CRITICAL           ((UINT8)4)
#define SMBIOS_COOLING_DEVICE_STATUS_CRITICAL               ((UINT8)5)
#define SMBIOS_COOLING_DEVICE_STATUS_NON_RECOVERABLE        ((UINT8)6)

//
// Temperature Probe (Type 28)
//

#define SMBIOS_TEMPERATURE_PROBE_INFORMATION_TYPE ((UINT8)28)

typedef struct _SMBIOS_TEMPERATURE_PROBE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    UINT8 Description; // string

    union
    {
        struct
        {
            UINT8 Location : 5; // SMBIOS_TEMPERATURE_PROBE_LOCATION_*
            UINT8 Status : 3;   // SMBIOS_PROBE_STATUS_*
        };

        UINT8 Value;
    } LocationAndStatus;

    SHORT MaximumValue;
    SHORT MinimumValue;
    USHORT Resolution;
    USHORT Tolerance;
    USHORT Accuracy;
    ULONG OEMDefined;
    SHORT NominalValue;
} SMBIOS_TEMPERATURE_PROBE_INFORMATION, * PSMBIOS_TEMPERATURE_PROBE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_TEMPERATURE_PROBE_INFORMATION) == 0x16);

#define SMBIOS_TEMPERATURE_PROBE_LOCATION_OTHER                    ((UINT8)1)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_UNKNOWN                  ((UINT8)2)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_PROCESSOR                ((UINT8)3)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_DISK                     ((UINT8)4)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_PERIPHERAL_BAY           ((UINT8)5)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_SYSTEM_MANAGEMENT_MODULE ((UINT8)6)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_MOTHERBOARD              ((UINT8)7)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_MEMORY_MODULE            ((UINT8)8)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_PROCESSOR_MODULE         ((UINT8)9)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_POWER_UNIT               ((UINT8)10)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_ADD_IN_CARD              ((UINT8)11)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_FRONT_PANEL_BOARD        ((UINT8)12)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_BACK_PANEL_BOARD         ((UINT8)13)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_POWER_SYSTEM_BOARD       ((UINT8)14)
#define SMBIOS_TEMPERATURE_PROBE_LOCATION_DRIVE_BACK_PLANE         ((UINT8)15)

//
// Electrical Current Probe (Type 29)
//

#define SMBIOS_ELECTRICAL_CURRENT_PROBE_INFORMATION_TYPE ((UINT8)29)

typedef struct _SMBIOS_ELECTRICAL_CURRENT_PROBE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    UINT8 Description; // string

    union
    {
        struct
        {
            UINT8 Location : 5; // SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_*
            UINT8 Status : 3;   // SMBIOS_PROBE_STATUS_*
        };

        UINT8 Value;
    } LocationAndStatus;

    USHORT MaximumValue;
    USHORT MinimumValue;
    USHORT Resolution;
    USHORT Tolerance;
    USHORT Accuracy;
    ULONG OEMDefined;
    USHORT NominalValue;
} SMBIOS_ELECTRICAL_CURRENT_PROBE_INFORMATION, * PSMBIOS_ELECTRICAL_CURRENT_PROBE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_ELECTRICAL_CURRENT_PROBE_INFORMATION) == 0x16);

#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_OTHER                    ((UINT8)1)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_UNKNOWN                  ((UINT8)2)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_PROCESSOR                ((UINT8)3)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_DISK                     ((UINT8)4)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_PERIPHERAL_BAY           ((UINT8)5)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_SYSTEM_MANAGEMENT_MODULE ((UINT8)6)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_MOTHERBOARD              ((UINT8)7)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_MEMORY_MODULE            ((UINT8)8)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_PROCESSOR_MODULE         ((UINT8)9)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_POWER_UNIT               ((UINT8)10)
#define SMBIOS_ELECTRICAL_CURRENT_PROBE_LOCATION_ADD_IN_CARD              ((UINT8)11)

//
// Out-of-Band Remote Access (Type 30)
//

#define SMBIOS_OUT_OF_BAND_REMOTE_ACCESS_INFORMATION_TYPE ((UINT8)30)

typedef struct _SMBIOS_OUT_OF_BAND_REMOTE_ACCESS_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.2+
    UINT8 Manufacturer; // string

    union
    {
        struct
        {
            UINT8 InboundEnabled : 1;
            UINT8 OutboundEnabled : 1;
            UINT8 Reserved : 6;
        };

        UINT8 Value;
    } Connections;
} SMBIOS_OUT_OF_BAND_REMOTE_ACCESS_INFORMATION, * PSMBIOS_OUT_OF_BAND_REMOTE_ACCESS_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_OUT_OF_BAND_REMOTE_ACCESS_INFORMATION) == 0x6);

//
// Boot Integrity Services (BIS) Entry Point (Type 31)
//

#define SMBIOS_BOOT_INTEGRITY_SERVICES_ENTRY_POINT ((UINT8)31)

//
// Structure type 31 (decimal) is reserved for use by the Boot Integrity Services (BIS).
// See the Boot Integrity Services API Specification for details.
//

//
// System Boot Information (Type 32)
//

#define SMBIOS_SYSTEM_BOOT_INFORMATION_TYPE ((UINT8)32)

typedef struct _SMBIOS_SYSTEM_BOOT_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UINT8 Reserved[6];
    UINT8 BootStatus;  // SMBIOS_SYSTEM_BOOT_STATUS_*
} SMBIOS_SYSTEM_BOOT_INFORMATION, * PSMBIOS_SYSTEM_BOOT_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_BOOT_INFORMATION) == 0xB);

#define SMBIOS_SYSTEM_BOOT_STATUS_NO_ERROR                           ((UINT8)0)
#define SMBIOS_SYSTEM_BOOT_STATUS_NO_BOOTABLE_MEDIA                  ((UINT8)1)
#define SMBIOS_SYSTEM_BOOT_STATUS_OPERATING_SYSTEM_FAILED_TO_LOAD    ((UINT8)2)
#define SMBIOS_SYSTEM_BOOT_STATUS_FIRMWARE_DETECTED_HARDWARE_FAILURE ((UINT8)3)
#define SMBIOS_SYSTEM_BOOT_STATUS_OPERATING_SYSTEM_DETECTED_HARDWARE_FAILURE  ((UINT8)4)
#define SMBIOS_SYSTEM_BOOT_STATUS_USER_REQUESTED_BOOT                ((UINT8)5)
#define SMBIOS_SYSTEM_BOOT_STATUS_SECURITY_VIOLATION                 ((UINT8)6)
#define SMBIOS_SYSTEM_BOOT_STATUS_PREVIOUSLY_REQUESTED_IMAGE         ((UINT8)7)
#define SMBIOS_SYSTEM_BOOT_STATUS_WATCHDOG_EXPIRED                   ((UINT8)8)
// 9-127 specification reserved
// 128-191 OEM reserved
// 192-255 product specific

//
// 64-Bit Memory Error Information (Type 33)
//

#define SMBIOS_64_BIT_MEMORY_ERROR_INFORMATION_TYPE ((UINT8)33)

typedef struct _SMBIOS_64_BIT_MEMORY_ERROR_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UINT8 Type;        // SMBIOS_MEMORY_ERROR_TYPE_*
    UINT8 Granularity; // SMBIOS_MEMORY_ERROR_GRANULARITY_*
    UINT8 Operation;   // SMBIOS_MEMORY_ERROR_OPERATION_*
    ULONG VendorSyndrome;
    ULONGLONG ArrayErrorAddress;
    ULONGLONG DeviceErrorAddress;
    ULONG ErrorResolution;
} SMBIOS_64_BIT_MEMORY_ERROR_INFORMATION, * PSMBIOS_64_BIT_MEMORY_ERROR_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_64_BIT_MEMORY_ERROR_INFORMATION) == 0x1F);

//
// Management Device (Type 34)
//

#define SMBIOS_MANAGEMENT_DEVICE_INFORMATION_TYPE ((UINT8)34)

typedef struct _SMBIOS_MANAGEMENT_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UINT8 Description; // string
    UINT8 DeviceType;  // SMBIOS_MANAGEMENT_DEVICE_TYPE_*
    ULONG Address;
    UINT8 AddressType; // SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_*
} SMBIOS_MANAGEMENT_DEVICE_INFORMATION, * PSMBIOS_MANAGEMENT_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MANAGEMENT_DEVICE_INFORMATION) == 0xB);

#define SMBIOS_MANAGEMENT_DEVICE_TYPE_OTHER           ((UINT8)1)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_UNKNOWN         ((UINT8)2)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_LM75            ((UINT8)3)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_LM78            ((UINT8)4)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_LM79            ((UINT8)5)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_LM80            ((UINT8)6)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_LM81            ((UINT8)7)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_ADM9240         ((UINT8)8)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_DS1780          ((UINT8)9)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_1617            ((UINT8)10)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_GL518SM         ((UINT8)11)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_W83781D         ((UINT8)12)
#define SMBIOS_MANAGEMENT_DEVICE_TYPE_HT82H791        ((UINT8)13)

#define SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_OTHER   ((UINT8)1)
#define SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_UNKNOWN ((UINT8)2)
#define SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_IO_PORT ((UINT8)3)
#define SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_MEMORY  ((UINT8)4)
#define SMBIOS_MANAGEMENT_DEVICE_ADDRESS_TYPE_SMBUS   ((UINT8)5)

//
// Management Device Component (Type 35)
//

#define SMBIOS_MANAGEMENT_DEVICE_COMPONENT_INFORMATION_TYPE ((UINT8)35)

typedef struct _SMBIOS_MANAGEMENT_DEVICE_COMPONENT_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UINT8 Description; // string
    USHORT ManagementDeviceHandle;
    USHORT ComponentHandle;
    USHORT ThresholdHandle;
} SMBIOS_MANAGEMENT_DEVICE_COMPONENT_INFORMATION, * PSMBIOS_MANAGEMENT_DEVICE_COMPONENT_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MANAGEMENT_DEVICE_COMPONENT_INFORMATION) == 0xB);

//
// Management Device Threshold Data (Type 36)
//

#define SMBIOS_MANAGEMENT_DEVICE_THRESHOLD_INFORMATION_TYPE ((UINT8)36)

typedef struct _SMBIOS_MANAGEMENT_DEVICE_THRESHOLD_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    USHORT LowerThresholdNonCritical;
    USHORT UpperThresholdNonCritical;
    USHORT LowerThresholdCritical;
    USHORT UpperThresholdCritical;
    USHORT LowerThresholdNonRecoverable;
    USHORT UpperThresholdNonRecoverable;
} SMBIOS_MANAGEMENT_DEVICE_THRESHOLD_INFORMATION, * PSMBIOS_MANAGEMENT_DEVICE_THRESHOLD_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MANAGEMENT_DEVICE_THRESHOLD_INFORMATION) == 0x10);

//
// Memory Channel (Type 37)
//

#define SMBIOS_MEMORY_CHANNEL_INFORMATION_TYPE ((UINT8)37)

typedef struct _SMBIOS_MEMORY_CHANNEL_ENTRY
{
    UINT8 Load;
    USHORT Handle;
} SMBIOS_MEMORY_CHANNEL_ENTRY, * PSMBIOS_MEMORY_CHANNEL_ENTRY;

typedef struct _SMBIOS_MEMORY_CHANNEL_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UCHAR Type;         // SMBIOS_MEMORY_CHANNEL_TYPE_*
    UCHAR MaximumLoad;
    UINT8 Count;
    SMBIOS_MEMORY_CHANNEL_ENTRY Entries[ANYSIZE_ARRAY];
} SMBIOS_MEMORY_CHANNEL_INFORMATION, * PSMBIOS_MEMORY_CHANNEL_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MEMORY_CHANNEL_INFORMATION) == 0xA);

#define SMBIOS_MEMORY_CHANNEL_TYPE_OTHER     ((UINT8)1)
#define SMBIOS_MEMORY_CHANNEL_TYPE_UNKNOWN   ((UINT8)2)
#define SMBIOS_MEMORY_CHANNEL_TYPE_RAMBUS    ((UINT8)3)
#define SMBIOS_MEMORY_CHANNEL_TYPE_SYNC_LINK ((UINT8)4)

//
// IPMI Device Information (Type 38)
//

#define SMBIOS_IPMI_DEVICE_INFORMATION_TYPE ((UINT8)38)

typedef struct _SMBIOS_IPMI_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3+
    UINT8 Type; // SMBIOS_IPMI_INTERFACE_TYPE_*

    union
    {
        struct
        {
            UINT8 Minor : 4;
            UINT8 Major : 4;
        };

        UINT8 Value;
    } SpecificationRevision;

    UINT8 I2CTargetAddress;
    UINT8 NVStorageDeviceAddress;
    ULONGLONG BaseAddress;

    union
    {
        struct
        {
            UINT8 InterruptTriggerMode : 1; // 1 = level, 0 = edge
            UINT8 InterruptPolarity : 1;    // 1 = active high, 0 = active low
            UINT8 Reserved : 1;
            UINT8 InterruptInfo : 1;        // 1 = specified, 0 = not specified
            UINT8 LSBAddress : 1;           // address bit 0 value
            UINT8 Reserved2 : 1;
            UINT8 RegisterSpacing : 2;      // SMBIOS_IPMI_REGISTER_SPACING_*
        };

        UINT8 Value;
    } Info;

    UINT8 InterruptNumber;
} SMBIOS_IPMI_DEVICE_INFORMATION, * PSMBIOS_IPMI_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_IPMI_DEVICE_INFORMATION) == 0x12);

#define SMBIOS_IPMI_INTERFACE_TYPE_UNKONWN      ((UINT8)0)
#define SMBIOS_IPMI_INTERFACE_TYPE_KCS          ((UINT8)1)
#define SMBIOS_IPMI_INTERFACE_TYPE_SMIC         ((UINT8)2)
#define SMBIOS_IPMI_INTERFACE_TYPE_BT           ((UINT8)3)
#define SMBIOS_IPMI_INTERFACE_TYPE_SSIF         ((UINT8)4)

#define SMBIOS_IPMI_REGISTER_SPACING_SUCCESSIVE ((UINT8)0)
#define SMBIOS_IPMI_REGISTER_SPACING_32_BIT     ((UINT8)1)
#define SMBIOS_IPMI_REGISTER_SPACING_16_BIT     ((UINT8)2)
#define SMBIOS_IPMI_REGISTER_SPACING_RESERVED   ((UINT8)3)

//
// System Power Supply (Type 39)
//

#define SMBIOS_SYSTEM_POWER_SUPPLY_INFORMATION_TYPE ((UINT8)39)

typedef struct _SMBIOS_SYSTEM_POWER_SUPPLY_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.3.1+
    UINT8 PowerUnitGroup;
    UINT8 Location;          // string
    UINT8 DeviceName;        // string
    UINT8 Manufacturer;      // string
    UINT8 SerialNumber;      // string
    UINT8 AssetTag;          // string
    UINT8 ModelPartNumber;   // string
    UINT8 Revision;          // string
    USHORT MaxPowerCapacity;

    union
    {
        struct
        {
            USHORT HostSwappable : 1;
            USHORT Present : 1;
            USHORT Unplugged : 1;
            USHORT RangeSwitching : 4; // SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_*
            USHORT Status : 3;         // SMBIOS_POWER_SUPPLY_STATUS_*
            USHORT Type : 4;           // SMBIOS_POWER_SUPPLY_TYPE_*
            USHORT Reserved : 2;
        };

        USHORT Value;
    } Characteristics;

    USHORT InputVoltageProbeHandle;
    USHORT CoolingDeviceHandle;
    USHORT InputCurrentProbeHandle;
} SMBIOS_SYSTEM_POWER_SUPPLY_INFORMATION, * PSMBIOS_SYSTEM_POWER_SUPPLY_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_SYSTEM_POWER_SUPPLY_INFORMATION) == 0x16);

#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_OTHER          ((USHORT)1)
#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_UNKNOWN        ((USHORT)2)
#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_MANUAL         ((USHORT)3)
#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_AUTO_SWITCH    ((USHORT)4)
#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_WIDE_RANGE     ((USHORT)5)
#define SMBIOS_POWER_SUPPLY_RANGE_SWITCHING_NOT_APPLICABLE ((USHORT)6)

#define SMBIOS_POWER_SUPPLY_STATUS_OTHER                   ((USHORT)1)
#define SMBIOS_POWER_SUPPLY_STATUS_UNKNOWN                 ((USHORT)2)
#define SMBIOS_POWER_SUPPLY_STATUS_OK                      ((USHORT)3)
#define SMBIOS_POWER_SUPPLY_STATUS_NON_CRITICAL            ((USHORT)4)
#define SMBIOS_POWER_SUPPLY_STATUS_CRITICAL                ((USHORT)5)

#define SMBIOS_POWER_SUPPLY_TYPE_OTHER                      ((USHORT)1)
#define SMBIOS_POWER_SUPPLY_TYPE_UNKNOWN                    ((USHORT)2)
#define SMBIOS_POWER_SUPPLY_TYPE_LINEAR                     ((USHORT)3)
#define SMBIOS_POWER_SUPPLY_TYPE_SWITCHING                  ((USHORT)4)
#define SMBIOS_POWER_SUPPLY_TYPE_BATTERY                    ((USHORT)5)
#define SMBIOS_POWER_SUPPLY_TYPE_UPS                        ((USHORT)6)
#define SMBIOS_POWER_SUPPLY_TYPE_CONVERTER                  ((USHORT)7)
#define SMBIOS_POWER_SUPPLY_TYPE_REGULATOR                  ((USHORT)8)

//
// Additional Information (Type 40)
//

#define SMBIOS_ADDITIONAL_INFORMATION_TYPE ((UINT8)40)

typedef struct _SMBIOS_ADDITIONAL_ENTRY
{
    UINT8 Length;
    USHORT ReferencedHandle;
    UINT8 ReferencedOffset;
    UINT8 String; // string
    UINT8 Value[ANYSIZE_ARRAY];
} SMBIOS_ADDITIONAL_ENTRY, * PSMBIOS_ADDITIONAL_ENTRY;

typedef struct _SMBIOS_ADDITIONAL_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.6+
    UINT8 Count;
    SMBIOS_ADDITIONAL_ENTRY Entries[ANYSIZE_ARRAY];
} SMBIOS_ADDITIONAL_INFORMATION, * PSMBIOS_ADDITIONAL_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_ADDITIONAL_INFORMATION) == 0xB);

//
// Onboard Devices Extended Information (Type 41)
//

#define SMBIOS_ONBOARD_DEVICE_INFORMATION_TYPE ((UINT8)41)

typedef struct _SMBIOS_ONBOARD_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.6+
    UINT8 ReferenceDesignation; // string

    union
    {
        struct
        {
            UINT8 Type : 7;     // SMBIOS_ONBOARD_DEVICE_TYPE_*
            UINT8 Enabled : 1;
        };

        UINT8 Value;
    } DeviceType;

    UINT8 DeviceTypeInstance;
    USHORT SegmentGroupNumber;
    UINT8 BusNumber;

    union
    {
        struct
        {
            UINT8 FunctionNumber : 3;
            UINT8 DeviceNumber : 5;
        };

        UINT8 Value;
    } DeviceFunctionNumber;

} SMBIOS_ONBOARD_DEVICE_INFORMATION, * PSMBIOS_ONBOARD_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_ONBOARD_DEVICE_INFORMATION) == 0xB);

#define SMBIOS_ONBOARD_DEVICE_TYPE_OTHER        ((UINT8)1)
#define SMBIOS_ONBOARD_DEVICE_TYPE_UNKNOWN      ((UINT8)2)
#define SMBIOS_ONBOARD_DEVICE_TYPE_VIDEO        ((UINT8)3)
#define SMBIOS_ONBOARD_DEVICE_TYPE_SCSI         ((UINT8)4)
#define SMBIOS_ONBOARD_DEVICE_TYPE_ETHERNET     ((UINT8)5)
#define SMBIOS_ONBOARD_DEVICE_TYPE_TOKEN_RING   ((UINT8)6)
#define SMBIOS_ONBOARD_DEVICE_TYPE_SOUND        ((UINT8)7)
#define SMBIOS_ONBOARD_DEVICE_TYPE_PATA         ((UINT8)8)
#define SMBIOS_ONBOARD_DEVICE_TYPE_SATA         ((UINT8)9)
#define SMBIOS_ONBOARD_DEVICE_TYPE_SAS          ((UINT8)10)
#define SMBIOS_ONBOARD_DEVICE_TYPE_WIRELESS_LAN ((UINT8)11)
#define SMBIOS_ONBOARD_DEVICE_TYPE_BLUETOOTH    ((UINT8)12)
#define SMBIOS_ONBOARD_DEVICE_TYPE_WWAN         ((UINT8)13)
#define SMBIOS_ONBOARD_DEVICE_TYPE_EMMC         ((UINT8)14)
#define SMBIOS_ONBOARD_DEIVCE_TYPE_NVME         ((UINT8)15)
#define SMBIOS_ONBOARD_DEVICE_TYPE_UFS          ((UINT8)16)

//
// Management Controller Host Interface (Type 42)
//

#define SMBIOS_MCHI_INFORMATION_TYPE ((UINT8)42)

typedef struct _SMBIOS_MCHI_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.6+
    UINT8 Type;   // SMBIOS_MCHI_TYPE_*
    UINT8 Length;
    UINT8 Data[ANYSIZE_ARRAY];
    // SMBIOS_MCHI_PROTOCOL_RECORDS
} SMBIOS_MCHI_INFORMATION, * PSMBIOS_MCHI_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_MCHI_INFORMATION) == 0x7);

typedef struct _SMBIOS_MCHI_PROTOCOL_RECORD
{
    UINT8 Type;   // SMBIOS_MCHI_PROTOCOL_TYPE_*
    UINT8 Length;
    UINT8 Data[ANYSIZE_ARRAY];
} SMBIOS_MCHI_PROTOCOL_RECORD, * PSMBIOS_MCHI_PROTOCOL_RECORD;

STATIC_ASSERT(sizeof(SMBIOS_MCHI_PROTOCOL_RECORD) == 0x3);

typedef struct _SMBIOS_MCHI_PROTOCOL_RECORDS
{
    UINT8 Count;
    SMBIOS_MCHI_PROTOCOL_RECORD Records[ANYSIZE_ARRAY];
} SMBIOS_MCHI_PROTOCOL_RECORDS, * PSMBIOS_MCHI_PROTOCOL_RECORDS;

STATIC_ASSERT(sizeof(SMBIOS_MCHI_PROTOCOL_RECORDS) == 0x4);

// 0-63 MCTP host interfaces
#define SMBIOS_MCHI_TYPE_NETWORK_INTERFACE ((UINT8)64)
#define SMBIOS_MCHI_TYPE_OEM_DEFINED       ((UINT8)240)

#define SMBIOS_MCHI_PROTOCOL_TYPE_RESERVED_0      ((UINT8)0)
#define SMBIOS_MCHI_PROTOCOL_TYPE_RESERVED_1      ((UINT8)1)
#define SMBIOS_MCHI_PROTOCOL_TYPE_IPMI            ((UINT8)2)
#define SMBIOS_MCHI_PROTOCOL_TYPE_MCTP            ((UINT8)3)
#define SMBIOS_MCHI_PROTOCOL_TYPE_REFRESH_OVER_IP ((UINT8)4)
#define SMBIOS_MCHI_PROTOCOL_TYPE_OEM_DEFINED     ((UINT8)240)

//
// TPM Device (Type 43)
//

#define SMBIOS_TPM_DEVICE_INFORMATION_TYPE ((UINT8)43)

typedef struct _SMBIOS_TPM_DEVICE_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.6+
    UINT8 VendorID[4];
    UINT8 MajorSpecVersion;
    UINT8 MinorSpecVersion;
    ULONG FirmwareVersion1;
    ULONG FirmwareVersion2;
    UINT8 Description;         // string
    ULONGLONG Characteristics; // SMBIOS_TPM_DEVICE_*
    ULONG OEMDefined;
} SMBIOS_TPM_DEVICE_INFORMATION, * PSMBIOS_TPM_DEVICE_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_TPM_DEVICE_INFORMATION) == 0x1F);

#define SMBIOS_TPM_DEVICE_RESERVED_0                          0x0000000000000001ULL
#define SMBIOS_TPM_DEVICE_RESERVED_1                          0x0000000000000002ULL
#define SMBIOS_TPM_DEVICE_CONFIGURABLE_VIA_FIRMWARE_UPDATE    0x0000000000000004ULL
#define SMBIOS_TPM_DEVICE_CONFIGURABLE_VIA_SOFTWARE_UPDATE    0x0000000000000008ULL
#define SMBIOS_TPM_DEVICE_CONFIGURABLE_VIA_PROPRIETARY_UPDATE 0x0000000000000010ULL
#define SMBIOS_TPM_DEIVCE_RESERVED                            0xFFFFFFFFFFFFFFE0ULL

//
// Processor Additional Information (Type 44)
//

#define SMBIOS_PROCESSOR_ADDITIONAL_INFORMATION_TYPE ((UINT8)44)

typedef struct _SMBIOS_PROCESSOR_SPECIFIC_BLOCK
{
    UINT8 Length;
    UINT8 Type;   // SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_*
    UINT8 Data[ANYSIZE_ARRAY];
} SMBIOS_PROCESSOR_SPECIFIC_BLOCK, * PSMBIOS_PROCESSOR_SPECIFIC_BLOCK;

STATIC_ASSERT(sizeof(SMBIOS_PROCESSOR_SPECIFIC_BLOCK) == 0x3);

typedef struct _SMBIOS_PROCESSOR_ADDITIONAL_INFORMATION
{
    SMBIOS_HEADER Header;
    // 2.6+
    USHORT Handle;
    SMBIOS_PROCESSOR_SPECIFIC_BLOCK Blocks[ANYSIZE_ARRAY];
} SMBIOS_PROCESSOR_ADDITIONAL_INFORMATION, * PSMBIOS_PROCESSOR_ADDITIONAL_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_PROCESSOR_ADDITIONAL_INFORMATION) == 0x9);

#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_X86         ((UINT8)1)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_X64         ((UINT8)2)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_IA64        ((UINT8)3)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_ARM32       ((UINT8)4)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_ARM64       ((UINT8)5)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_RISCV32     ((UINT8)6)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_RISCV64     ((UINT8)7)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_RISCV128    ((UINT8)8)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_LOONGARCH32 ((UINT8)9)
#define SMBIOS_PROCESSOR_ARCHITECTURE_TYPE_LOONGARCH64 ((UINT8)10)

//
// Firmware Inventory Information (Type 45)
//

#define SMBIOS_FIRMWARE_INVENTORY_INFORMATION_TYPE ((UINT8)45)

typedef struct _SMBIOS_FIRMWARE_INVENTORY_INFORMATION
{
    SMBIOS_HEADER Header;
    // 3.5+
    UINT8 ComponentName;          // string
    UINT8 Version;                // string
    UINT8 VersionFormat;
    UINT8 Identifier;             // string
    UINT8 IdentifierFormat;
    UINT8 ReleaseDate;            // string
    UINT8 Manufacturer;           // string
    UINT8 LowestSupportedVersion; // string
    ULONGLONG ImageSize;
    USHORT Characteristics;       // SMBIOS_FIRMWARE_INVENTORY_FLAG_*
    UINT8 State;                  // SMBIOS_FIRMWARE_INVENTORY_STATE_*
    UINT8 AssociatedComponents;
    USHORT AssociatedComponentHandles[ANYSIZE_ARRAY];
} SMBIOS_FIRMWARE_INVENTORY_INFORMATION, * PSMBIOS_FIRMWARE_INVENTORY_INFORMATION;

STATIC_ASSERT(sizeof(SMBIOS_FIRMWARE_INVENTORY_INFORMATION) == 0x1A);

#define SMBIOS_FIRMWARE_INVENTORY_FLAG_UPDATABLE        0x00000001UL
#define SMBIOS_FIRMWARE_INVENTORY_FLAG_WRITE_PROTECTED  0x00000002UL
#define SMBIOS_FIRMWARE_INVENTORY_FLAG_RESERVED         0xFFFFFFFCUL

#define SMBIOS_FIRMWARE_INVENTORY_STATE_OTHER           ((UINT8)1)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_UNKNOWN         ((UINT8)2)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_DISABLED        ((UINT8)3)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_ENABLED         ((UINT8)4)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_ABSENT          ((UINT8)5)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_STANDBY_OFFLINE ((UINT8)6)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_STANDBY_SPARE   ((UINT8)7)
#define SMBIOS_FIRMWARE_INVENTORY_STATE_OFFLINE         ((UINT8)8)

//
// String Property (Type 46)
//

#define SMBIOS_STRING_PROPERTY_TYPE ((UINT8)46)

typedef struct _SMBIOS_STRING_PROPERTY
{
    SMBIOS_HEADER Header;
    // 3.5+
    USHORT Identifier; // SMBIOS_STRING_PROPERTY_ID_*
    UINT8  String;
    USHORT ParentHandle;
} SMBIOS_STRING_PROPERTY, * PSMBIOS_STRING_PROPERTY;

STATIC_ASSERT(sizeof(SMBIOS_STRING_PROPERTY) == 0x9);

#define SMBIOS_STRING_PROPERTY_ID_RESERVED          ((UINT8)1)
#define SMBIOS_STRING_PROPERTY_ID_UEIF_DEVICE_PATH  ((UINT8)2)

//
// Inactive (Type 126)
//

#define SMBIOS_INACTIVE_TYPE     ((UINT8)126)

typedef struct _SMBIOS_INACTIVE
{
    SMBIOS_HEADER Header;
} SMBIOS_INACTIVE, * PSMBIOS_INACTIVE;

STATIC_ASSERT(sizeof(SMBIOS_INACTIVE) == 0x4);

//
// End-of-Table (Type 127)
//

#define SMBIOS_END_OF_TABLE_TYPE ((UINT8)127)

typedef struct _SMBIOS_END_OF_TABLE
{
    SMBIOS_HEADER Header;
} SMBIOS_END_OF_TABLE, * PSMBIOS_END_OF_TABLE;

STATIC_ASSERT(sizeof(SMBIOS_END_OF_TABLE) == 0x4);

#include <poppack.h>


VEIL_END()

#if _MSC_VER >= 1200
#pragma warning(pop)
#endif

#endif // _SMBIOS_H